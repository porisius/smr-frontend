{"version":3,"file":"VersionForm.AuBImqo3.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    GameVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n      BasePlugin?: boolean;\n      Optional?: boolean;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  const hasSMLDependency = parsed.Plugins?.some((plugin) => plugin.Name === 'SML');\n  const hasGameVersion = !!parsed.GameVersion;\n\n  if (!hasSMLDependency && !hasGameVersion) {\n    return {\n      message: `either GameVersion or SML dependency must be present in ${modReference}.uplugin`\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Release\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n  $: dependencies = $modMeta?.uplugin?.Plugins?.filter((d) => !d.BasePlugin) || [];\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('stability')} *</span>\n        <select class=\"select\" bind:value={$data.stability}>\n          <option value=\"alpha\">Alpha</option>\n          <option value=\"beta\">Beta</option>\n          <option value=\"release\">Release</option>\n        </select>\n      </label>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n\n            {#if $modMeta.uplugin.GameVersion !== undefined}\n              <span><strong>Game version:</strong> {$modMeta.uplugin.GameVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-game-version')}\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each dependencies as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\" {disabled}>\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}\n      </button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply text-yellow-500 underline;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","hasSMLDependency","Plugins","some","plugin","Name","hasGameVersion","GameVersion","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_7","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","t9_value","SemVersion","undefined","create_if_block_6","create_if_block_5","if_block2","create_if_block_3","create_if_block_2","p","br0","br1","t9","t2","t2_value","strong","i","create_if_block_4","each_value","ensure_array_like_dev","html_tag","raw_value","t14_value","t18_value","t20_value","create_if_block","handle_promise","promise","markdown","info","add_render_callback","call","select","form_1","div6","div0","label0","option0","option1","option2","select_option","div3","div1","label1","textarea","set_input_value","div2","span2","div4","a","div5","button","span3","t14","t18","t20","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Release","submitIcon","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","select_value","this","preview","dependencies","$modMeta","d","BasePlugin"],"mappings":"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"}