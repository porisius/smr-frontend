{"version":3,"file":"VersionForm.babed95d.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n};\n\nexport type modArchData = {\n  ModVersionID: string;\n  platform: string;\n  asset: string;\n  hash?: string;\n  size?: number;\n};\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n  arch: modArchData[];\n};\n\nconst validateUPluginJsonModZip = async (\n  zip: JSZip,\n  uPluginJsonFile: JSZip.JSZipObject,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> =>\n  uPluginJsonFile\n    .async('string')\n    .then(async (uPluginJson) => {\n      const result = await validateUPluginJson(uPluginJson);\n\n      if (result.length != 0) {\n        return {\n          message: `invalid ${modReference}.uplugin`,\n          extended: result\n        };\n      }\n\n      const parsed = JSON.parse(uPluginJson);\n\n      let foundSML = false;\n      for (const dependency of parsed.Plugins) {\n        if (dependency.Name === 'SML') {\n          foundSML = true;\n          break;\n        }\n      }\n\n      if (!foundSML) {\n        return {\n          message: 'mod must depend on SML'\n        };\n      }\n\n      return {\n        uplugin: parsed,\n        objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak'))\n      };\n    })\n    .catch((err) => ({\n      message: `invalid ${modReference}.uplugin: ${err}`\n    }));\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then((zip) => {\n        const uPluginJsonFile = zip.file('WindowsNoEditor/' + modReference + '.uplugin');\n        if (uPluginJsonFile) {\n          return validateUPluginJsonModZip(zip, uPluginJsonFile, modReference);\n        }\n\n        return {\n          message: 'WindowsNoEditor/' + modReference + '.uplugin missing from mod'\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    arch: [{ ModVersionID: '', platform: '', asset: '', hash: '', size: 0 }],\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label={$t('stability')}>\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n        <Option value=\"release\">Release</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')}:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label={$t('changelog')}\n          required\n          input$rows={10} />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\" {disabled}>{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply underline text-yellow-500;\n  }\n</style>\n"],"names":["validateUPluginJsonModZip","async","zip","uPluginJsonFile","modReference","then","uPluginJson","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","uplugin","objects","Object","keys","files","filter","f","endsWith","catch","err","validateModZip","file","JSZip","loadAsync","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","target","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","strong","t2","t2_value","i","create_if_block_4","each_value","innerHTML","raw_value","t9_value","t11_value","select_props","value","create_if_block","textfield_props","handle_promise","promise","markdown","info","form_1","div6","div0","div3","div1","div2","div4","a","div5","select_changes","textfield_changes","t9","t11","t","getTranslate","$$props","onSubmit","initialValues","arch","ModVersionID","platform","asset","hash","VersionStabilities","Alpha","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$$self","$$","not_equal","$data","preview"],"mappings":"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"}