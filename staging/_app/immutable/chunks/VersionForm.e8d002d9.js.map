{"version":3,"file":"VersionForm.e8d002d9.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  let foundSML = false;\n  for (const dependency of parsed.Plugins) {\n    if (dependency.Name === 'SML') {\n      foundSML = true;\n      break;\n    }\n  }\n\n  if (!foundSML) {\n    return {\n      message: 'mod must depend on SML'\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('stability')} *</span>\n        <select class=\"select\" bind:value={$data.stability}>\n          <option value=\"alpha\">Alpha</option>\n          <option value=\"beta\">Beta</option>\n          <option value=\"release\">Release</option>\n        </select>\n      </label>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"btn variant-ghost-primary\" type=\"submit\" {disabled}>{submitText}</button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply underline text-yellow-500;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","some","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","i","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","br0","br1","t2","t2_value","strong","create_if_block_4","each_value","ensure_array_like_dev","html_tag","raw_value","t9_value","t14_value","t18_value","t20_value","create_if_block","handle_promise","promise","markdown","info","add_render_callback","call","select","form_1","div6","div0","label0","option0","option1","option2","select_option","div3","div1","label1","textarea","set_input_value","div2","span2","div4","a","div5","button","t9","t14","t18","t20","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Alpha","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","select_value","this","preview"],"mappings":"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"}