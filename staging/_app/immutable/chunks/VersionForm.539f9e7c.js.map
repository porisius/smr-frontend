{"version":3,"file":"VersionForm.539f9e7c.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  let foundSML = false;\n  for (const dependency of parsed.Plugins) {\n    if (dependency.Name === 'SML') {\n      foundSML = true;\n      break;\n    }\n  }\n\n  if (!foundSML) {\n    return {\n      message: 'mod must depend on SML'\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Alpha\n  };\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label={$t('stability')}>\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n        <Option value=\"release\">Release</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')}:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label={$t('changelog')}\n          required\n          input$rows={10} />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\" {disabled}>{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply underline text-yellow-500;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","some","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","i","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","br0","br1","t2","t2_value","strong","create_if_block_4","each_value","innerHTML","raw_value","t9_value","t11_value","e","select_props","create_if_block","textfield_props","handle_promise","promise","markdown","info","form_1","div6","div0","div3","div1","div2","div4","a","div5","select_changes","textfield_changes","t9","t11","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Alpha","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$$self","$$","not_equal","$data","preview"],"mappings":"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"}