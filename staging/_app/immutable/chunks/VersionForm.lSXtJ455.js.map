{"version":3,"file":"VersionForm.lSXtJ455.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  let foundSML = false;\n  for (const dependency of parsed.Plugins) {\n    if (dependency.Name === 'SML') {\n      foundSML = true;\n      break;\n    }\n  }\n\n  if (!foundSML) {\n    return {\n      message: 'mod must depend on SML'\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Release\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('stability')} *</span>\n        <select class=\"select\" bind:value={$data.stability}>\n          <option value=\"alpha\">Alpha</option>\n          <option value=\"beta\">Beta</option>\n          <option value=\"release\">Release</option>\n        </select>\n      </label>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\" {disabled}>\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}\n      </button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply text-yellow-500 underline;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","some","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t_1_value","insert_hydration_dev","span","anchor","dirty","set_data_dev","t_1","t0_value","if_block0","create_if_block_6","create_if_block_1","div","append_hydration_dev","label","input","current","t0","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","SemVersion","undefined","create_if_block_5","if_block1","create_if_block_3","create_if_block_2","p","br0","br1","t2","t2_value","strong","i","create_if_block_4","each_value","ensure_array_like_dev","html_tag","raw_value","t9_value","t14_value","t18_value","t20_value","create_if_block","handle_promise","promise","markdown","info","add_render_callback","call","select","form_1","div6","div0","label0","option0","option1","option2","select_option","div3","div1","label1","textarea","set_input_value","div2","span2","div4","a","div5","button","span3","t9","t14","t18","t20","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Release","submitIcon","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","select_value","this","preview"],"mappings":"qxBA4BA,MAAMA,GAAkBC,OAAOC,KAAKC,EACjCC,EAAAA,IAAKC,GAAQF,GAAWE,CAAAA,CAAAA,EACxBC,OAAQC,GAAiBA,OAAAA,GAAU,QAEtC,EAAMC,GAAkBC,MACtBC,EACAC,IAEM,CAAA,MAAAC,QAAeC,GAAoBH,CAAAA,EAErC,GAAAE,EAAOE,QAAU,EACZ,MAAA,CACLC,QAAS,WAAWJ,CAAAA,WACpBK,SAAUJ,CAEd,EAEM,MAAAK,EAASC,KAAKC,MAAMT,CAE1B,EAAA,IAAIU,EAAW,GACJ,UAAAC,KAAcJ,EAAOK,QAC1B,GAAAD,EAAWE,OAAS,MAAO,CAClBH,EAAA,GACX,KACF,CAGF,OAAKA,EAMEH,EALE,CACLF,QAAS,wBAEb,CAEO,EAGT,SAASS,GAASC,EAAAA,CACV,MAAAC,EAAQD,EAAKE,MAAM,GAAA,EAClB,OAAAD,EAAMA,EAAMZ,OAAS,CAAA,CAC9B,CAEA,SAASc,GAAQH,GACT,MAAAC,EAAQD,EAAKE,MAAM,GAAA,EAClB,OAAAD,EAAMG,MAAM,EAAGH,EAAMZ,OAAS,GAAGgB,KAAK,GAAA,CAC/C,CAEA,MAAMC,GAAiBtB,MACrBuB,EACArB,IAEe,IAAIsB,KAIdC,UAAUF,CACVG,EAAAA,KAAK1B,MAAO2B,GAAAA,CACL,MAAAC,EAAeD,EAAI9B,OAAQgC,GAAad,GAASc,IAAa3B,EAAe,UAAA,EAE/E,GAAA0B,EAAavB,SAAW,EACnB,MAAA,CACLC,QAAS,4BAA8BJ,EAAe,kBAItD,GAAA0B,EAAavB,SAAW,GAAKuB,EAAa,CAAGE,EAAAA,OAAS5B,EAAe,WAAY,CAE7E6B,MAAAA,EAAoBhC,MAAAA,GAAAA,MAAsB6B,EAAa,CAAA,EAAG5B,MAAM,QAAA,EAAWE,GAEjF,MAAI,YAAa6B,EACRA,EAGF,CACLC,QAASD,EACTE,QAASzC,OAAOC,KAAKkC,EAAIO,OAAOrC,OAC7BsC,GAAMA,EAAEC,SAAS,KAAA,GAAUD,EAAEC,SAAS,MAAWD,GAAAA,EAAEC,SAAS,MAE/DC,CAAAA,EAAAA,QAAS,CAAC,SAEd,CAAA,CAAA,CAGI,GAAAT,EAAaU,KAAMH,GAAMA,EAAEL,OAAS5B,EAAe,UAAa,EAC3D,MAAA,CACLI,QACE,gBACAJ,EACA,gMAAA,EAIA,MAAAmC,EAAUT,EAAajC,IAAKwC,GAAMhB,GAAQgB,EAAEL,IAE5C,CAAA,EAAAS,EAAiBF,EAAQxC,OAAQ2C,GAAOjD,CAAAA,GAAgBkD,SAASD,CAAAA,CAAAA,EACnE,GAAAD,EAAelC,SAAW,EACrB,MAAA,CACLC,QAAS,sBAAsBiC,EAAelB,KAAK,IAEvD,CAAA,EAAA,EAEA,MAAMqB,EAAef,EAAI9B,OAAQgC,GAAcQ,CAAAA,EAAQC,KAAMK,GAAWd,EAASe,WAAWD,EAAS,GAAA,CAAA,CAAA,EACjG,GAAAD,EAAarC,SAAW,EACnB,MAAA,CACLC,QAAS,uCAAuCoC,EAAa/C,IAAKwC,GAAMA,EAAEL,MAAMT,KAAK,IAAA,CAAA,EAAA,EAInF,MAAAwB,EAAAA,MAAyBC,QAAQC,IACrCnB,EAAajC,IAAKwC,GAChBA,EAAEnC,MAAM,UAAUgD,MAAOC,GAAAA,CAEvB,MAAM,IAAIC,MAAM,WAAWhD,CAAyB+C,aAAAA,CAAAA,EAAAA,CAAK,CAK3D,CAAA,CAAA,EAAA,GAAA,CAACJ,EAAiBM,MAAOhB,GAAMA,IAAMU,EAAiB,IACjD,MAAA,CACLvC,QAAS,gBAAkBJ,EAAe,wCAAA,EAK9C,MAAM6B,QAAoBhC,GAAgB8C,EAAiB,GAAI3C,CAE/D,EAAA,MAAI,YAAa6B,EACRA,EAGF,CACLC,QAASD,EACTE,QAASzC,OAAOC,KAAKkC,EAAIO,KAAOrC,EAAAA,OAAQsC,GAAMA,EAAEC,SAAS,KAAA,GAAUD,EAAEC,SAAS,MAAA,GAAWD,EAAEC,SAAS,MAAA,CAAA,EACpGC,UACF,CAEDW,EAAAA,MAAOC,IAAS,CACf3C,QAAS,0BAA4B2C,KAKhCG,GAAyB,CACpClD,EACAmD,IAEAC,GAAW,CACT/B,KAAMgC,GACJC,GAAAA,EAAUC,YAAYzD,MAAOuB,EAAMmC,KACjC,GAAM,EAAA,SAAUnC,GAAQ,SAAUA,GAAQ,SAAUA,GAAO,CACzDmC,EAAIC,SAAS,CACXrD,QAAS,qBACTsD,KAAMC,GAAiBC,SAEzB,MACF,CAEA,MAAM3D,EAAAA,MAAemB,GAAeC,EAAMrB,GAE1C,GAAI,YAAaC,EAAQ,CACvBuD,EAAIC,SAAS,CACXrD,QAASH,EAAOG,QAChBsD,KAAMC,GAAiBC,SAEzB,MACF,CAEAT,EAAYU,IAAI5D,CAAAA,CAAyB,IAG7C6D,UAAWC,GAAAA,EACXC,UAAWD,iMC/I2BE,GAAAT,OAAW,IAAE,2NAA/CU,EAAsDzB,EAAA0B,EAAAC,2BAApBC,EAAA,QAAAJ,KAAAA,GAAAT,OAAW,IAAE,KAAAc,EAAAC,EAAAN,CAAAA,0MAM5BO,EAAAhB,KAAG,QAAM,mFAEgBpD,CAAAA,KAAO,CAAA,GAAAA,CAAAA,cAAPA,CAAAA,IAAOA,EAAA,OAAA,mCAKhD,IAAAqE,EAAAjB,GAAMnC,EAAAA,MAAIqD,GAAAlB,CAAAA,IAOVA,EAAQ,CAAAmB,GAAAA,GAAAnB,4DAdmB,IAAA,+LAAA,+cADhCU,EAMKzB,EAAAmC,EAAAR,CALHS,EAAAA,EAAuCD,EAAAE,CAAAA,uBACvCD,EAAoGD,EAAAG,kGADjFC,GAAAX,EAAA,MAAAG,KAAAA,EAAAhB,GAAG,EAAA,MAAA,EAAM,KAAAc,EAAAW,EAAAT,CAAAA,6DAOzB,EAAAhB,GAAMnC,EAAAA,uEAONmC,EAAQ,yVAXyBS,GAAAT,IAAW,GAAA,IAAE,4NAA/CU,EAAsDzB,EAAA0B,EAAAC,2BAApBC,EAAA,QAAAJ,KAAAA,GAAAT,OAAW,IAAE,KAAAc,EAAAC,EAAAN,wMAMhCO,EAAAhB,KAAG,WAAW,EAAA,SAAc0B,GAAA1B,EAAM,CAAA,EAAAnC,KAAK8D,MAAQ,WAAS,aACxDC,EAAA5B,KAAG,aAAW,SAAc6B,EAAAC,GAAY9B,EAAM,CAAA,EAAAnC,KAAKkE,IAAI,EAAA,2EADvC,GAAA,oEACA,GAAA,2IADA,iJACA,gNAFjCrB,EAGKzB,EAAAmC,EAAAR,CAFHS,EAAAA,EAA+ED,EAAAY,CAAzEX,EAAAA,EAAmCW,EAAAC,CAAAA,8BAAsCZ,EAAKD,EAAAc,UACpFb,EAA8ED,EAAAe,GAAxEd,EAAmCc,EAAAC,+CAD1B,CAAAvB,EAAA,KAAAG,KAAAA,EAAAhB,KAAG,WAAW,EAAA,KAAAc,EAAAW,EAAAT,GAAcH,EAAA,IAAAa,KAAAA,GAAA1B,EAAM,CAAAnC,EAAAA,KAAK8D,MAAQ,WAAS,KAAAb,EAAAuB,EAAAX,CACxD,EAAAb,EAAA,KAAAe,KAAAA,EAAA5B,KAAG,WAAW,EAAA,KAAAc,EAAAwB,EAAAV,GAAcf,EAAA,IAAAgB,KAAAA,EAAAC,GAAY9B,EAAM,CAAA,EAAAnC,KAAKkE,IAAAA,EAAI,KAAAjB,EAAAyB,EAAAV,+JAOrDb,EAAAhB,KAAG,WAAS,WAAcA,EAAQ,CAAC1B,EAAAA,QAAQkE,QAAO,8BAYlCX,EAAA7B,EAAS,GAAArB,QAAQhB,KAAK,MAAI,2BAVpD,OAAAqC,EAAS,CAAA1B,EAAAA,QAAQmE,aAAeC,OAASC,wBAY3CC,EAAA5C,EAAS,GAAA1B,QAAQnB,UAAYuF,QAASG,GAAA7C,CAAAA,0BAetCA,EAAQ,GAACzB,SAAWyB,KAASzB,QAAQ5B,OAAS,EAACmG,2GA7BrB,4SAAA,GAAA,sfAFjCpC,CAAAA,EA8CKzB,EAAAmC,EAAAR,CAAAA,EA7CHS,EAWGD,EAAA2B,CAAAA,EAVD1B,EAA8E0B,EAAAf,CAAAA,EAAxEX,EAAiCW,EAAAC,CAAAA,4BAA2BZ,EAAAA,EAAMW,EAAAgB,2BAY1E3B,EAAAA,EAAyED,EAAAe,CAAnEd,EAAAA,EAAyBc,EAAAC,iBAA8Bf,EAAMc,EAAAc,6DAZlDpC,EAAA,KAAAG,KAAAA,EAAAhB,GAAG,EAAA,SAAA,EAAS,KAAAc,EAAAW,EAAAT,CAAAA,gBAAchB,EAAQ,GAAC1B,QAAQkE,QAAO,KAAA1B,EAAAuB,EAAAX,CAAAA,kEAYlCb,EAAA,KAAAgB,KAAAA,EAAA7B,EAAS,CAAArB,EAAAA,QAAQhB,KAAK,IAAI,EAAA,KAAAmD,EAAAyB,EAAAV,CAAAA,EAEtD7B,EAAS,CAAA,EAAA1B,QAAQnB,UAAYuF,6SAR3B1B,EAAAhB,KAAG,kCAAkC,EAAA,SACrCA,EAAQ,CAAC1B,EAAAA,QAAQkE,QAAO,iEAAC,MAAA,6FAAA,8GAF5B9B,EAGMzB,EAAA0B,EAAAC,CAAAA,+CAFHC,EAAA,KAAAG,KAAAA,EAAAhB,GAAG,EAAA,kCAAA,EAAkC,KAAAc,EAAAW,EAAAT,iBACrChB,EAAQ,CAAA,EAAC1B,QAAQkE,QAAO,KAAA1B,EAAAoC,EAAAC,yKAJSnD,EAAQ,GAAC1B,QAAQmE,WAAU,6WAA/D/B,EAA4EzB,EAAA0B,EAAAC,GAAtES,EAA4BV,EAAAyC,iBAA8B/B,EAAMV,EAAAuB,CAAAA,iCAAlClC,EAAQ,GAAC1B,QAAQmE,WAAU,KAAA3B,EAAAoC,EAAAC,2LAatDnC,EAAAhB,KAAG,gBAAc,gBACnBA,EAAQ,CAAC1B,EAAAA,QAAQnB,8BAAtBR,OAAI0G,GAAA,6EADsB,wJAAA,yLAD9B3C,EAWGzB,EAAA8D,EAAAnC,GAVDS,EAAsC0B,EAAAK,iBAAA/B,EAAK0B,EAAAb,CAAAA,0EAAlC,IAAArB,EAAA,KAAAG,KAAAA,EAAAhB,GAAG,EAAA,cAAA,EAAc,KAAAc,EAAAW,EAAAT,eACnBhB,EAAQ,CAAC1B,EAAAA,QAAQnB,2BAAtBR,OAAI0G,GAAA,EAAA,mHAAJ1G,6ZAKE+D,EAAazB,EAAA0B,EAAAC,wJAFNH,EAAAT,MAAWyC,WAAU,kLAA5B/B,EAAmCzB,EAAA0B,EAAAC,2BAA5BC,EAAA,KAAAJ,KAAAA,EAAAT,IAAWyC,EAAAA,WAAU,KAAA3B,EAAAC,EAAAN,qKAFrBO,EAAAhB,IAAW5C,EAAAA,KAAI,6BACnB,OAAA4C,MAAWyC,WAAUa,uEADD,sGAAA,GAAA,gIAAzB5C,EAAmCzB,EAAAmE,EAAAxC,4CAMnCF,EAAKzB,EAAAiD,EAAAtB,mBANI,CAAAC,EAAA,KAAAG,KAAAA,EAAAhB,MAAW5C,KAAI,KAAA0D,EAAAW,EAAAT,CAAAA,2RAsBvBP,EAAAT,KAAG,kCAAkC,EAAA,4RAF1CU,EAIGzB,EAAA8D,EAAAnC,CAAAA,EAHDS,EAEM0B,EAAApC,0BADH,CAAAE,EAAA,KAAAJ,KAAAA,EAAAT,KAAG,kCAAkC,EAAA,KAAAc,EAAAC,EAAAN,CAAAA,qJAT/BO,EAAAhB,KAAG,SAAS,EAAA,WACduD,EAAAC,GAAAxD,KAASzB,8BAAd5B,OAAI0G,GAAA,6EADiB,wJAAA,4LADzB3C,EAMGzB,EAAA8D,EAAAnC,CALDS,EAAAA,EAAiC0B,EAAAK,eAAA/B,EAAAA,EAAK0B,EAAAb,+EAA7BrB,EAAA,KAAAG,KAAAA,EAAAhB,KAAG,WAAS,KAAAc,EAAAW,EAAAT,UACduC,EAAAC,GAAAxD,KAASzB,2BAAd5B,OAAI0G,GAAA,EAAA,mHAAJ1G,8MACOqD,EAAM,IAAA,+OAAbU,CAAAA,EAAoBzB,EAAA0B,EAAAC,CAAAA,kBACpBF,EAAKzB,EAAAiD,EAAAtB,kCADEZ,EAAM,IAAA,KAAAc,EAAAW,EAAAT,2LAsBeP,GAAAT,OAAW,IAAE,6NAA/CU,EAAsDzB,EAAA0B,EAAAC,CAAAA,0BAApBC,EAAA,QAAAJ,KAAAA,GAAAT,OAAW,IAAE,KAAAc,EAAAC,EAAAN,qYAOJT,EAAe,IAAA,6PAA1DU,EAAgEzB,EAAAmC,EAAAR,0CAArBZ,EAAe,EAAA,EAAA,KAAAyD,EAAAV,EAAAW,CAAAA,ybA7FrD1C,EAAAhB,GAAG,EAAA,WAAA,EAAW,gEAkFZ2D,EAAA3D,GAAG,EAAA,WAAA,EAAW,wBAQhB4D,GAAA5D,KAAG,WAAS,qBASpB6D,GAAA7D,GAAG,EAAA,2BAAA,EAA2B,YAA8B8D,GAAA9D,GAAG,EAAA,gBAAA,EAAgB,uGA5F/BpD,CAAO,KAAA,CAAA,GAAAA,eAAPA,CAAOA,IAAAA,EAAA,OAAA,yCAKpDoD,CAAAA,EAAO,IAAA+D,GAAA/D,CAAAA,mEAyEwCpD,CAAAA,KAAO,CAAA,GAAAA,eAAPA,CAAOA,IAAAA,EAAA,OAAA,0HAMhDoH,GAAAC,GAAAC,GAASlE,EAAO,CAAAmE,CAAAA,EAAAA,CAAAA,+FA3FD,4NAkFE,iGAQJ,mFAS+D,GAAA,qDAKjDnE,EAAU,gBAC5CA,EAAU,qNAzGY,ujBAkFE,4OAQJ,GAAA,qNAS+D,yJAKjDA,EAAU,mCAC5CA,EAAU,CAAA,CAAA,mRAxGwBA,KAAMQ,YAAS,QAAA4D,GAAA,IAAApE,EAAA,EAAAqE,EAAAA,KAAAC,8MAkF6C,sqBAvFvG5D,EAiHMzB,EAAAsF,EAAA3D,GAhHJS,EA+GKkD,EAAAC,GA9GHnD,EAYKmD,EAAAC,CAXHpD,EAAAA,EAOOoD,EAAAC,CAAAA,EANLrD,EAA+BqD,EAAA1C,CAAAA,qBAC/BX,EAAAA,EAIQqD,EAAAJ,CAHNjD,EAAAA,EAAmCiD,EAAAK,CACnCtD,EAAAA,EAAiCiD,EAAAM,CACjCvD,EAAAA,EAAuCiD,EAAAO,CAAAA,EAHNC,GAAAR,EAAAtE,GAAMQ,EAAAA,UAAS,qDA8EtDa,EAiBKmD,EAAAO,GAhBH1D,EAQK0D,EAAAC,GAPH3D,EAGO2D,EAAAC,GAFL5D,EAA+B4D,EAAA9C,0BAC/Bd,EAAkG4D,EAAAC,CAAAA,EAArCC,GAAAD,EAAAlF,KAAMM,qCAMvEe,EAAAA,EAMK0D,EAAAK,CALH/D,EAAAA,EAA4B+D,EAAAC,wFAQhChE,EAAAA,EAEKmD,EAAAc,sBAD+BjE,EAAoDiE,GAAAC,8BAGxFlE,EAKKmD,EAAAgB,IAJHnE,EAGQmE,GAAAC,GAFNpE,EAAoDoE,EAAAC,4IAxG7C,CAAAlE,IAAAX,EAAA,MAAAG,KAAAA,EAAAhB,GAAG,EAAA,WAAA,EAAW,KAAAc,EAAAW,EAAAT,SACc8D,GAAAR,EAAAtE,GAAMQ,EAAAA,SAAAA,+DAWvCR,EAAO,CAAA,qGAsEAwB,IAAAX,EAAA,MAAA8C,KAAAA,EAAA3D,GAAG,EAAA,WAAA,EAAW,KAAAc,EAAA6E,EAAAhC,SACwCwB,GAAAD,EAAAlF,KAAMM,yEAO9D,GAAA,CAAAkB,IAAAX,EAAA,MAAA+C,MAAAA,GAAA5D,GAAG,EAAA,SAAA,EAAS,KAAAc,EAAA8E,GAAAhC,YACX/C,EAAA,IAAAoD,MAAAA,GAAAC,GAASlE,EAAO,MAAAgE,GAAAC,GAAAE,eAQzB,CAAA3C,IAAAX,EAAA,MAAAgD,MAAAA,GAAA7D,GAAG,EAAA,2BAAA,EAA2B,KAAAc,EAAA+E,GAAAhC,EAA8B,GAAA,CAAArC,IAAAX,EAAA,MAAAiD,MAAAA,GAAA9D,GAAG,EAAA,gBAAA,EAAgB,KAAAc,EAAAgF,GAAAhC,qBAK3C9D,EAAU,qBAC5CA,EAAU,igBA3IF,KAAAlB,CAAAA,EAAAA,GAAMiH,oCAEVvJ,CAAAA,EAAoBwJ,YACpBC,GAA8CD,iBAC9CE,EAAa,CACtB5F,UAAW,GACXE,UAAW2F,GAAmBC,wBAErBC,CAAkBL,EAAAA,cAClBM,EAAaC,EAAG,iBAAcP,EAE9B,CAAAQ,QAAAA,EAAU,EAAA,EAAKR,EAEpB,MAAAS,EAAUC,sCAEZ,CAAA,EAAA,IAAAC,EAAW,GAET,MAAAC,EAAgBlH,GAAuBlD,EAAciK,SACnDI,EAAIC,KAAEA,CAAAA,EAASC,GAAU,CAChBb,cACfc,EAAAA,QAASC,GAAS,CAAGC,OAAQN,CAAkBO,CAAAA,EAAAA,EAAAA,EAC/ClB,SAAWmB,GACTC,CAAAA,EAAA,EAAAV,EAAW,EACXV,EAAAA,EAASqB,GAAcF,EAAWR,CAAAA,CAAAA,EAAgB5I,KAAI,IAAAqJ,EAAA,EAAQV,EAAW,EAAA,CAAA,CAAK,8uBAYzCY,EAAM/G,UAASgH,GAAAC,IAAAA,wBAkFaF,EAAMjH,UAASmH,KAAArL,+gCA1FjFsL,EAAWH,EAAMjH,WAAwB,EAAA"}