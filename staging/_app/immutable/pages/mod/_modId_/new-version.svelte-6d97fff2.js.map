{"version":3,"file":"new-version.svelte-6d97fff2.js","sources":["../../../../../../../../src/lib/utils/chunked-upload.ts","../../../../../../../../src/routes/mod/[modId]/new-version.svelte"],"sourcesContent":["/* eslint-disable */\n\nimport type { File } from '$lib/models/file';\nimport type { ExecuteMutation, OperationStore } from '@urql/svelte';\nimport type {\n  CheckVersionUploadStateQuery,\n  CreateVersionMutation,\n  Exact,\n  FinalizeCreateVersionMutation,\n  NewVersion,\n  UploadVersionPartMutation\n} from '$lib/generated';\nimport type { Writable } from 'svelte/store';\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n};\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (\n  file: File,\n  modId: string,\n  version: NewVersion,\n  state: Writable<UploadState>,\n  gql: {\n    createVersion: ExecuteMutation<CreateVersionMutation, Exact<{ modId: any }>>;\n    uploadVersionPart: ExecuteMutation<\n      UploadVersionPartMutation,\n      Exact<{ modId: any; versionId: any; part: number; file: any }>\n    >;\n    finalizeCreateVersion: ExecuteMutation<\n      FinalizeCreateVersionMutation,\n      Exact<{ modId: any; versionId: any; version: NewVersion }>\n    >;\n    checkVersionUploadState: OperationStore<\n      CheckVersionUploadStateQuery,\n      Exact<{ modId: any; versionId: any }>,\n      CheckVersionUploadStateQuery\n    >;\n  }\n): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity)\n    .fill(0)\n    .map((_, index) => index)\n    .reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return gql.uploadVersionPart({\n      modId: modId,\n      versionId: versionID,\n      part: chunkId,\n      file: chunk\n    });\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID)\n        .then(() => {\n          activeConnections -= 1;\n\n          state.set({\n            total: chunksQuantity,\n            uploaded: chunksQuantity - chunksQueue.length - activeConnections\n          });\n\n          return sendNext(versionID);\n        })\n        .catch((err) => {\n          console.error('Upload failed:', err);\n          activeConnections -= 1;\n          chunksQueue.push(chunkId);\n          retries += 1;\n          if (retries < 5) {\n            return sendNext(versionID);\n          } else {\n            throw new Error('Failed uploading after 5 attempts');\n          }\n        }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return gql\n    .createVersion({ modId })\n    .then(async (data) => {\n      state.set({\n        total: chunksQuantity,\n        uploaded: 0\n      });\n\n      await sendNext(data.data.createVersion);\n\n      return data.data.createVersion;\n    })\n    .then((versionID) => {\n      console.log('Finalizing', { versionID });\n\n      return gql\n        .finalizeCreateVersion({\n          modId: modId,\n          versionId: versionID,\n          version: version\n        })\n        .then(() => {\n          return new Promise<ChunkedResponse>((resolve, reject) => {\n            let tries = 0;\n            const interval = setInterval(() => {\n              if (tries == 60) {\n                clearInterval(interval);\n                return reject(new Error('Timed out waiting for mod processing'));\n              }\n\n              gql.checkVersionUploadState.reexecute({\n                requestPolicy: 'network-only'\n              });\n              tries++;\n            }, 10000);\n\n            gql.checkVersionUploadState.variables.versionId = versionID;\n            const sub = gql.checkVersionUploadState.subscribe((data) => {\n              if (data.fetching) {\n                return;\n              }\n\n              if (data.error) {\n                clearInterval(interval);\n                reject(new Error(data.error.message));\n                setTimeout(sub);\n                return;\n              }\n\n              if (!data.data) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState.version) {\n                return;\n              }\n\n              if (!data.data.checkVersionUploadState.version.id) {\n                return;\n              }\n\n              sub();\n              clearInterval(interval);\n              resolve(data.data.checkVersionUploadState);\n            });\n          });\n        });\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n\n  export const load = paramsToProps();\n</script>\n\n<script lang=\"ts\">\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { goto } from '$app/navigation';\n  import type { VersionData } from '$lib/models/versions';\n  import VersionForm from '$lib/components/versions/VersionForm.svelte';\n  import {\n    CheckVersionUploadStateDocument,\n    CreateVersionDocument,\n    FinalizeCreateVersionDocument,\n    GetModReferenceDocument,\n    UploadVersionPartDocument\n  } from '$lib/generated';\n  import { get, writable } from 'svelte/store';\n  import { chunkedUpload } from '$lib/utils/chunked-upload';\n  import type { UploadState } from '$lib/utils/chunked-upload';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Card, { Content } from '@smui/card';\n\n  export let modId!: string;\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set((up.uploaded / up.total) * 100);\n      }\n    }\n  });\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const mod = operationStore(GetModReferenceDocument, { mod: modId });\n\n  query(mod);\n\n  const createVersion = mutation({\n    query: CreateVersionDocument\n  });\n\n  const uploadVersionPart = mutation({\n    query: UploadVersionPartDocument\n  });\n\n  const finalizeCreateVersion = mutation({\n    query: FinalizeCreateVersionDocument\n  });\n\n  const checkVersionUploadState = operationStore(\n    CheckVersionUploadStateDocument,\n    {\n      versionId: undefined,\n      modId: undefined\n    },\n    {\n      pause: true\n    }\n  );\n\n  $: $mod.data && (checkVersionUploadState.variables.modId = $mod.data.mod.id);\n\n  query(checkVersionUploadState);\n\n  const onSubmit = async (data: VersionData) => {\n    return chunkedUpload(\n      data.file,\n      get(mod).data.mod.id,\n      {\n        changelog: data.changelog,\n        stability: data.stability\n      },\n      uploadState,\n      {\n        createVersion,\n        uploadVersionPart,\n        finalizeCreateVersion,\n        checkVersionUploadState\n      }\n    )\n      .then((success) => {\n        console.log({ success });\n        // TODO Toast or something\n        goto(base + '/mod/' + modId + '/version/' + success.version.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        errorMessage = 'Error creating version: ' + err.message;\n        errorToast = true;\n        uploadStatus.set('');\n      });\n  };\n\n  $: if (!errorToast) errorMessage = '';\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description=\"Creating a new version of mod {$mod.data.mod.name}\"\n      title=\"New version of mod {$mod.data.mod.name}\"\n    />\n  {/if}\n</svelte:head>\n\n<h1 class=\"text-4xl my-4 font-bold\">\n  New Version for\n  {#if $mod.fetching}\n    ...\n  {:else if !$mod.error}\n    {$mod.data.mod.name}\n  {/if}\n</h1>\n\n<Card>\n  <Content>\n    {#if $mod.fetching}\n      <p>Loading...</p>\n    {:else if $mod.error}\n      <p>Oh no... {$mod.error.message}</p>\n    {:else}\n      <VersionForm {onSubmit} modReference={$mod.data.mod.mod_reference} />\n\n      {#if $uploadStatus}\n        <div class=\"relative pt-4\">\n          <div class=\"flex mb-2 items-center justify-between\">\n            <div>\n              <span\n                class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-white bg-yellow-600\"\n              >\n                {$uploadStatus}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <span class=\"text-xs font-semibold inline-block text-white\">{$uploadPercent.toFixed(0)}%</span>\n            </div>\n          </div>\n          <div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-600\">\n            <div\n              style=\"width: {$uploadPercent.toFixed(0)}%\"\n              class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-yellow-600\"\n            />\n          </div>\n        </div>\n      {/if}\n    {/if}\n  </Content>\n</Card>\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n"],"names":["chunkedUpload","async","file","modId","version","state","gql","chunksQuantity","Math","ceil","size","chunkSize","chunksQueue","Array","fill","map","_","index","reverse","upload","chunk","chunkId","versionID","uploadVersionPart","versionId","part","threadsQuantity","activeConnections","retries","sendNext","length","pop","begin","slice","Promise","all","then","set","total","uploaded","catch","err","console","error","push","Error","createVersion","data","log","finalizeCreateVersion","resolve","reject","tries","interval","setInterval","clearInterval","checkVersionUploadState","reexecute","requestPolicy","variables","sub","subscribe","fetching","message","setTimeout","id","description","ctx","mod","name","title","dirty","metadescriptors_changes","t_value","set_data_dev","t","modReference","mod_reference","create_if_block_2","versionform_changes","insert_hydration_dev","target","p","anchor","t1","t1_value","toFixed","div5","append_hydration_dev","div2","div0","span0","div1","span1","div4","div3","t2","t2_value","span","create_if_block_5","create_if_block_3","create_if_block_4","h1","load","paramsToProps","$$props","uploadStatus","writable","uploadPercent","uploadState","up","errorMessage","errorToast","operationStore","GetModReferenceDocument","query","mutation","CreateVersionDocument","UploadVersionPartDocument","FinalizeCreateVersionDocument","CheckVersionUploadStateDocument","undefined","pause","onSubmit","get","changelog","stability","success","goto","base","$$invalidate","value","$mod"],"mappings":"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"}