{"version":3,"file":"unapproved-mods.svelte-251f6318.js","sources":["../../../../../../../src/routes/admin/unapproved-mods.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { ApproveModDocument, DenyModDocument, GetUnapprovedModsDocument } from '$lib/generated';\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import { writable } from 'svelte/store';\n  import PageControls from '$lib/components/utils/PageControls.svelte';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button from '@smui/button';\n  import { prettyDate } from '$lib/utils/formatting';\n\n  // TODO Selectable\n  const perPage = 20;\n\n  const mods = operationStore(GetUnapprovedModsDocument, {\n    filter: {\n      offset: 0,\n      limit: perPage\n    }\n  });\n\n  const page = writable(1);\n  let totalMods: number;\n\n  page.subscribe((p) => ($mods.variables.filter.offset = (p - 1) * perPage));\n\n  $: totalMods = $mods?.data?.getUnapprovedMods?.count;\n\n  const approveModMut = mutation({\n    query: ApproveModDocument\n  });\n\n  const approveMod = (modId: string) => {\n    approveModMut({ modId }).then(() => {\n      mods.reexecute();\n    });\n  };\n\n  const denyModMut = mutation({\n    query: DenyModDocument\n  });\n\n  const denyMod = (modId: string) => {\n    denyModMut({ modId }).then(() => {\n      mods.reexecute();\n    });\n  };\n\n  query(mods);\n</script>\n\n<svelte:head>\n  <MetaDescriptors description=\"Unapproved mods\" title=\"Admin: Unapproved Mods\" />\n</svelte:head>\n\n{#if totalMods}\n  <div class=\"mb-5 ml-auto flex justify-end\">\n    <div>\n      <PageControls totalPages={Math.ceil(totalMods / perPage)} currentPage={page} />\n    </div>\n  </div>\n{/if}\n\n<Card>\n  {#if $mods.fetching}\n    <Content>Loading...</Content>\n  {:else if $mods.error}\n    <Content>Oh no... {$mods.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Mod</Cell>\n          <Cell>Description</Cell>\n          <Cell>Release Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $mods.data.getUnapprovedMods.mods as mod}\n          <Row>\n            <Cell>{mod.name}</Cell>\n            <Cell>{mod.short_description}</Cell>\n            <Cell>{prettyDate(mod.created_at)}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" on:click={() => approveMod(mod.id)}>Approve</Button>\n                <Button variant=\"outlined\" on:click={() => denyMod(mod.id)}>Deny</Button>\n                <Button variant=\"outlined\" href={base + '/mod/' + mod.id}>View</Button>\n              </div>\n            </Cell>\n          </Row>\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n\n{#if totalMods}\n  <div class=\"mt-5 ml-auto flex justify-end\">\n    <div>\n      <PageControls totalPages={Math.ceil(totalMods / perPage)} currentPage={page} />\n    </div>\n  </div>\n{/if}\n"],"names":["totalPages","Math","ceil","ctx","perPage","insert_hydration_dev","target","div1","anchor","append_hydration_dev","div0","dirty","pagecontrols_changes","t_value","name","set_data_dev","t","short_description","prettyDate","created_at","href","base","id","div","button2_changes","each_value","data","getUnapprovedMods","mods","length","i","each_blocks","error","message","t1","t1_value","fetching","create_if_block_3","create_if_block","operationStore","GetUnapprovedModsDocument","filter","offset","limit","page","writable","totalMods","subscribe","p","set_store_value","$mods","variables","approveModMut","mutation","query","ApproveModDocument","approveMod","modId","then","reexecute","denyModMut","DenyModDocument","denyMod","mod","$$invalidate","count"],"mappings":"g6BA2DgCA,WAAAC,KAAKC,KAAKC,KAAYC,eAAuBD,EAAI,EAAA,uUAF/EE,EAIKC,EAAAC,EAAAC,CAHHC,EAAAA,EAEKF,EAAAG,CAAAA,+CADuB,AAAAC,EAAA,GAAAC,GAAAZ,WAAAC,KAAKC,KAAKC,KAAYC,CAAAA,2rDActC,KAAA,CAAA,sBAAA,KAAA,CAAA,oMACA,aAAA,CAAA,sBAAA,aAAA,CAAA,oMACA,qCAAA,cAAA,CAAA,+tDAOG,CAAA,GAAAS,GAAAV,MAAIW,KAAI,oGAAR,CAAA,AAAAH,EAAA,GAAAE,IAAAA,GAAAV,MAAIW,KAAI,KAAAC,EAAAC,EAAAH,4IACR,GAAAA,GAAAV,MAAIc,kBAAiB,qGAArB,AAAAN,EAAA,GAAAE,IAAAA,GAAAV,MAAIc,kBAAiB,KAAAF,EAAAC,EAAAH,CAAAA,CAAAA,gJACrBK,EAAWf,EAAG,IAACgB,YAAU,iHAAzBD,EAAWf,EAAG,IAACgB,UAAU,EAAA,KAAAJ,EAAAC,EAAAH,4KAGmC,SAAA,CAAA,sBAAA,SAAA,CAAA,iQACH,MAAA,CAAA,sBAAA,MAAA,CAAA,8PACF,6BAAA,4iBAAzBO,KAAAC,EAAO,QAAUlB,MAAImB,0YAHxDjB,EAIKC,EAAAiB,EAAAf,CAAAA,yMAD8B,EAAA,AAAAG,EAAA,GAAAa,GAAAJ,KAAAC,EAAO,QAAUlB,MAAImB,imEATvDG,EAAAtB,EAAM,GAAAuB,KAAKC,kBAAkBC,oCAAlCC,OAAIC,GAAA,kRAACL,EAAAtB,EAAM,GAAAuB,KAAKC,kBAAkBC,6BAAlCC,OAAIC,GAAA,EAAA,kHAAJD,OAAIC,EAAAC,EAAAF,OAAAC,GAAA,kDAAJD,OAAIC,GAAA,u+BAZS3B,EAAK,GAAC6B,MAAMC,QAAO,+BAA7B,WAAA,8BAAA,sFAAU9B,EAAK,GAAC6B,MAAMC,QAAO,KAAAlB,EAAAmB,EAAAC,sLAF7B,mCAAA,uOADN,MAAAhC,MAAMiC,SAAQ,EAETjC,KAAM6B,MAAK,mgBAmCShC,WAAAC,KAAKC,KAAKC,KAAYC,CAAAA,cAAuBD,EAAI,wUAF/EE,CAAAA,EAIKC,EAAAC,EAAAC,GAHHC,EAEKF,EAAAG,8CADuB,EAAA,AAAAC,EAAA,GAAAC,GAAAZ,WAAAC,KAAKC,KAAKC,KAAYC,wWA9CjDD,EAAS,IAAAkC,EAAAlC,gFA2CTA,EAAS,IAAAmC,EAAAnC,CAAAA,qZA3CTA,EAAS,kKA2CTA,EAAS,8ZAtFN,KAAAC,GAAU,+EAEV,CAAA,EAAA,KAAAwB,GAAOW,GAAeC,GAC1B,CAAAC,OACE,CAAAC,OAAQ,EACRC,MAAOvC,CAAAA,CAAAA,CAAAA,wCAILwC,GAAOC,GAAS,MAClBC,GAEJF,EAAKG,UAAWC,GAACC,GAAArB,EAAMsB,EAAMC,UAAUV,OAAOC,OAAUM,GAAI,GAAK5C,EAAO8C,CAIlE,CAAA,EAAA,KAAAE,GAAgBC,EACpB,CAAAC,MAAOC,EAGH,CAAA,EAAAC,EAAcC,GAAAA,CAClBL,EAAa,CAAGK,MAASC,CAAAA,CAAAA,EAAAA,KAAI,IAC3B9B,CAAAA,EAAK+B,UAIH,CAAA,CAAA,CAAA,EAAAC,EAAaP,EACjB,CAAAC,MAAOO,EAGH,CAAA,EAAAC,EAAWL,GAAAA,CACfG,EAAU,CAAGH,MAASC,CAAAA,CAAAA,EAAAA,KAAI,IACxB9B,CAAAA,EAAK+B,UAITL,CAAAA,CAAAA,CAAAA,EAAAA,GAAM1B,8KAsCmD4B,EAAWO,EAAIzC,SACfwC,EAAQC,EAAIzC,8fA7DpE0C,EAAA,EAAElB,EAAYI,GAAOxB,MAAMC,mBAAmBsC,KAAAA,CAAAA"}