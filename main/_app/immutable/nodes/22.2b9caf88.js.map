{"version":3,"file":"22.2b9caf88.js","sources":["../../../../../../src/lib/components/mods/ModGrid.svelte","../../../../../../src/routes/mods/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { queryStore, getContextClient } from '@urql/svelte';\n  import { GetModsDocument, ModFields, Order } from '$lib/generated';\n  import ModCard from './ModCard.svelte';\n  import PageControls from '$lib/components/utils/PageControls.svelte';\n  import { base } from '$app/paths';\n  import Button from '@smui/button';\n  import { Input } from '@smui/textfield';\n  import Paper from '@smui/paper';\n  import Fab from '@smui/fab';\n  import { Icon } from '@smui/common';\n  import { goto } from '$app/navigation';\n  import { page as storePage, navigating } from '$app/stores';\n  import { user } from '$lib/stores/user';\n  import FicsitCard from '$lib/components/general/FicsitCard.svelte';\n  import Select, { Option } from '@smui/select';\n  import { browser } from '$app/environment';\n\n  export let colCount: 4 | 5 = 4;\n  export let newMod = false;\n  export let showSearch = false;\n\n  const client = getContextClient();\n\n  let search = $storePage.url.searchParams.get('q');\n\n  // TODO Selectable\n  const perPage = 40;\n  let order: Order = Order.Desc;\n  let orderBy: ModFields = ModFields.LastVersionDate;\n\n  if (search) {\n    orderBy = ModFields.Search;\n  }\n\n  let page = parseInt($storePage.url.searchParams.get('p'), 10) || 1;\n\n  $: mods = queryStore({\n    query: GetModsDocument,\n    client,\n    variables: { offset: (page - 1) * perPage, limit: perPage, search, order, orderBy }\n  });\n\n  let totalMods = 0;\n\n  let searchField = search;\n\n  let timer: number;\n  $: {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if (searchField && searchField.length > 2) {\n        if ((search === '' || search === null) && searchField !== '' && searchField !== null) {\n          orderBy = ModFields.Search;\n          page = 1;\n        }\n\n        search = searchField;\n      } else if (searchField === '' || searchField === null) {\n        if (orderBy === ModFields.Search || !orderBy) {\n          orderBy = ModFields.LastVersionDate;\n        }\n\n        search = null;\n      }\n    }, 250) as unknown as number;\n  }\n\n  let urlSearch = searchField;\n\n  $: if ($navigating && $navigating.type !== 'goto') {\n    searchField = $storePage.url.searchParams.get('q');\n    page = parseInt($storePage.url.searchParams.get('p'), 10) || 1;\n    urlSearch = searchField;\n  }\n\n  const updateUrl = () => {\n    if (browser && !$navigating) {\n      const url = new URL(window.location.origin + window.location.pathname);\n      url.searchParams.append('p', page.toString());\n      urlSearch !== '' && urlSearch !== null && url.searchParams.append('q', urlSearch);\n      goto(url.toString(), { keepFocus: true });\n    }\n  };\n\n  $: {\n    page;\n    urlSearch;\n    updateUrl();\n  }\n\n  const handleKeyDown = (event: CustomEvent | KeyboardEvent) => {\n    if ((event as KeyboardEvent).key === 'Enter') {\n      urlSearch = searchField;\n    }\n  };\n\n  $: if ($mods?.data?.getMods?.count) {\n    totalMods = $mods.data.getMods.count;\n  }\n\n  $: gridClasses =\n    colCount == 4\n      ? '3xl:grid-cols-4 2xl:grid-cols-3 lg:grid-cols-2 grid-cols-1'\n      : '3xl:grid-cols-3 2xl:grid-cols-2 grid-cols-1';\n\n  $: orderFields = [\n    ['Name', 'name'],\n    ['Views', 'views'],\n    ['Downloads', 'downloads'],\n    ['Hotness (Views)', 'hotness'],\n    ['Popularity (Downloads)', 'popularity'],\n    ['Creation Date', 'created_at'],\n    ['Last Version', 'last_version_date'],\n    // Hide the search option if a search string is not set.\n    // The component must still exist, otherwise Select will set orderBy to null/undefined, because the selectedIndex would be -1.\n    ['Search', 'search', search === '' || search === null]\n  ];\n</script>\n\n<div class=\"ml-auto flex flex-wrap justify-between items-center mb-5\">\n  {#if newMod && $user !== null}\n    <Button variant=\"outlined\" href=\"{base}/new-mod\">New Mod</Button>\n  {/if}\n\n  {#if showSearch}\n    <div class=\"search-container flex flex-wrap sm:px-4\">\n      <div class=\"mr-3\">\n        <Select bind:value={orderBy} label=\"Order By\">\n          {#each orderFields as orderField}\n            <!-- Using style instead of tailwind because Option unnecessarily consumes the class prop without exposing another one for the inner item -->\n            <Option value={orderField[1]} style={orderField[2] ? 'display: none;' : ''}>{orderField[0]}</Option>\n          {/each}\n        </Select>\n      </div>\n      <div class=\"mr-3\">\n        <Select bind:value={order} label=\"Order\">\n          <Option value=\"asc\">Ascending</Option>\n          <Option value=\"desc\">Descending</Option>\n        </Select>\n      </div>\n      <Paper class=\"search-paper mr-3\" elevation={6}>\n        <Icon class=\"material-icons\">search</Icon>\n        <Input bind:value={searchField} on:keypress={handleKeyDown} placeholder=\"Search\" />\n      </Paper>\n      <Fab on:click={() => (urlSearch = searchField)} color=\"primary\" mini class=\"solo-fab\" aria-label=\"Search\">\n        <Icon class=\"material-icons\">arrow_forward</Icon>\n      </Fab>\n    </div>\n  {/if}\n\n  <div>\n    <PageControls totalPages={Math.ceil(totalMods / perPage)} bind:currentPage={page} />\n  </div>\n</div>\n\n{#if $mods.fetching}\n  <div class=\"grid {gridClasses} gap-4\">\n    {#each Array(perPage) as _}\n      <FicsitCard fake />\n    {/each}\n  </div>\n{:else if $mods.error}\n  <p>Oh no... {$mods.error.message}</p>\n{:else}\n  <div class=\"grid {gridClasses} gap-4\">\n    {#each $mods.data.getMods.mods as mod}\n      <ModCard {mod} />\n    {/each}\n  </div>\n{/if}\n\n<div class=\"mt-5 ml-auto flex justify-end\">\n  <div>\n    <PageControls totalPages={Math.ceil(totalMods / perPage)} bind:currentPage={page} />\n  </div>\n</div>\n\n<style>\n  .search-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-grow: 1;\n  }\n\n  * :global(.search-paper) {\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n    max-width: 600px;\n    height: 48px;\n  }\n\n  * :global(.search-paper > *) {\n    display: inline-block;\n    margin: 0 12px;\n  }\n</style>\n","<script lang=\"ts\">\n  import ModGrid from '$lib/components/mods/ModGrid.svelte';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n</script>\n\n<svelte:head>\n  <MetaDescriptors description=\"Mods available from the Satisfactory Mod Repository\" title=\"Mods\" />\n</svelte:head>\n\n<ModGrid showSearch={true} newMod={true} colCount={4} />\n"],"names":["base","ctx","insert_hydration","target","div2","anchor","append_hydration","div0","div1","t_value","dirty","set_data","t","value","style","option_changes","length","i","each_blocks","each_value_1","data","getMods","mods","div","error","message","p","t1","t1_value","each_value","Array","perPage","create_if_block_3","create_if_block_2","totalPages","Math","ceil","fetching","div3","pagecontrols0_changes","pagecontrols1_changes","colCount","$$props","newMod","showSearch","client","getContextClient","search","$storePage","url","searchParams","get","order","Order","Desc","orderBy","ModFields","LastVersionDate","Search","page","parseInt","totalMods","searchField","timer","urlSearch","updateUrl","$navigating","URL","window","location","origin","pathname","append","toString","goto","keepFocus","handleKeyDown","event","key","$$invalidate","click_handler","type","clearTimeout","setTimeout","$$subscribe_mods","queryStore","query","GetModsDocument","variables","offset","limit","$mods","count","gridClasses","orderFields"],"mappings":"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"}