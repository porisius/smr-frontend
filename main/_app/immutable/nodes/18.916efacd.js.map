{"version":3,"file":"18.916efacd.js","sources":["../../../../../../src/routes/mod/[modId]/new-version/+page.ts","../../../../../../src/lib/utils/chunked-upload.ts","../../../../../../src/routes/mod/[modId]/new-version/+page.svelte"],"sourcesContent":["import type { PageLoad } from './$types';\n\nexport const load: PageLoad = async ({ params }) => ({\n  ...params\n});\n","/* eslint-disable */\n\nimport type { File } from '$lib/models/file';\nimport type { Client } from 'urql';\nimport {\n  CheckVersionUploadStateDocument,\n  FinalizeCreateVersionDocument,\n  type Exact,\n  type NewVersion,\n  CreateVersionDocument,\n  UploadVersionPartDocument,\n  type CheckVersionUploadStateQuery\n} from '$lib/generated';\nimport type { Writable } from 'svelte/store';\nimport { queryStore } from '@urql/svelte';\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n};\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (\n  file: File,\n  modId: string,\n  version: NewVersion,\n  state: Writable<UploadState>,\n  client: Client\n): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity)\n    .fill(0)\n    .map((_, index) => index)\n    .reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return client\n      .mutation(UploadVersionPartDocument, {\n        modId: modId,\n        versionId: versionID,\n        part: chunkId,\n        file: chunk\n      })\n      .toPromise();\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID)\n        .then(() => {\n          activeConnections -= 1;\n\n          state.set({\n            total: chunksQuantity,\n            uploaded: chunksQuantity - chunksQueue.length - activeConnections\n          });\n\n          return sendNext(versionID);\n        })\n        .catch((err) => {\n          console.error('Upload failed:', err);\n          activeConnections -= 1;\n          chunksQueue.push(chunkId);\n          retries += 1;\n          if (retries < 5) {\n            return sendNext(versionID);\n          } else {\n            throw new Error('Failed uploading after 5 attempts');\n          }\n        }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return client\n    .mutation(CreateVersionDocument, { modId })\n    .toPromise()\n    .then(async (data) => {\n      state.set({\n        total: chunksQuantity,\n        uploaded: 0\n      });\n\n      await sendNext(data.data.createVersion);\n\n      return data.data.createVersion;\n    })\n    .then((versionID) => {\n      console.log('Finalizing', { versionID });\n\n      return client\n        .mutation(FinalizeCreateVersionDocument, { modId, versionId: versionID, version })\n        .toPromise()\n        .then(() => {\n          return new Promise<ChunkedResponse>((resolve, reject) => {\n            let tries = 0;\n            let checkVersionUploadState = queryStore({\n              query: CheckVersionUploadStateDocument,\n              client,\n              variables: {\n                modId: modId,\n                versionId: versionID\n              },\n              requestPolicy: 'network-only'\n            });\n            const interval = setInterval(() => {\n              if (tries == 60) {\n                clearInterval(interval);\n                return reject(new Error('Timed out waiting for mod processing'));\n              }\n\n              checkVersionUploadState.pause();\n              checkVersionUploadState.resume();\n              tries++;\n            }, 10000);\n\n            const unsub = checkVersionUploadState.subscribe((data) => {\n              if (data.fetching) {\n                return;\n              }\n\n              if (data.error) {\n                clearInterval(interval);\n                reject(new Error(data.error.message));\n                setTimeout(unsub);\n                return;\n              }\n\n              if (!data.data?.checkVersionUploadState?.version?.id) {\n                return;\n              }\n\n              unsub();\n              clearInterval(interval);\n              resolve(data.data.checkVersionUploadState);\n            });\n          });\n        });\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n","<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { goto } from '$app/navigation';\n  import type { VersionData } from '$lib/models/versions';\n  import VersionForm from '$lib/components/versions/VersionForm.svelte';\n  import { GetModReferenceDocument } from '$lib/generated';\n  import { writable } from 'svelte/store';\n  import { chunkedUpload } from '$lib/utils/chunked-upload';\n  import type { UploadState } from '$lib/utils/chunked-upload';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Card, { Content } from '@smui/card';\n  import type { PageData } from './$types';\n\n  export let data: PageData;\n\n  $: ({ modId } = data);\n\n  const client = getContextClient();\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set((up.uploaded / up.total) * 100);\n      }\n    }\n  });\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  $: mod = queryStore({\n    query: GetModReferenceDocument,\n    client,\n    variables: { mod: modId }\n  });\n\n  const onSubmit = async (versionData: VersionData) =>\n    chunkedUpload(\n      versionData.file,\n      $mod.data.mod.id,\n      {\n        changelog: versionData.changelog,\n        stability: versionData.stability\n      },\n      uploadState,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      client\n    )\n      .then((success) => {\n        console.log({ success });\n        // TODO Toast or something\n        goto(base + '/mod/' + modId + '/version/' + success.version.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        errorMessage = 'Error creating version: ' + err.message;\n        errorToast = true;\n        uploadStatus.set('');\n      });\n\n  $: if (!errorToast) {\n    errorMessage = '';\n  }\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description=\"Creating a new version of mod {$mod.data.mod.name}\"\n      title=\"New version of mod {$mod.data.mod.name}\" />\n  {/if}\n</svelte:head>\n\n<h1 class=\"text-4xl my-4 font-bold\">\n  New Version for\n  {#if $mod.fetching}\n    ...\n  {:else if !$mod.error}\n    {$mod.data.mod.name}\n  {/if}\n</h1>\n\n<Card>\n  <Content>\n    {#if $mod.fetching}\n      <p>Loading...</p>\n    {:else if $mod.error}\n      <p>Oh no... {$mod.error.message}</p>\n    {:else}\n      <VersionForm {onSubmit} modReference={$mod.data.mod.mod_reference} />\n\n      {#if $uploadStatus}\n        <div class=\"relative pt-4\">\n          <div class=\"flex mb-2 items-center justify-between\">\n            <div>\n              <span\n                class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-white bg-yellow-600\">\n                {$uploadStatus}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <span class=\"text-xs font-semibold inline-block text-white\">{$uploadPercent.toFixed(0)}%</span>\n            </div>\n          </div>\n          <div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-600\">\n            <div\n              style=\"width: {$uploadPercent.toFixed(0)}%\"\n              class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-yellow-600\" />\n          </div>\n        </div>\n      {/if}\n    {/if}\n  </Content>\n</Card>\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n"],"names":["load","async","params","chunkedUpload","file","modId","version","state","client","chunksQuantity","Math","ceil","size","chunkSize","chunksQueue","Array","fill","map","_","index","reverse","upload","chunk","chunkId","versionID","mutation","UploadVersionPartDocument","versionId","part","toPromise","threadsQuantity","activeConnections","retries","sendNext","length","pop","begin","slice","Promise","all","then","set","total","uploaded","catch","err","console","error","push","Error","CreateVersionDocument","data","createVersion","log","FinalizeCreateVersionDocument","resolve","reject","tries","checkVersionUploadState","queryStore","query","CheckVersionUploadStateDocument","variables","requestPolicy","interval","setInterval","clearInterval","pause","resume","unsub","subscribe","fetching","message","setTimeout","id","description","ctx","mod","name","title","dirty","metadescriptors_changes","t_value","set_data","t","modReference","mod_reference","create_if_block_2","versionform_changes","insert_hydration","target","p","anchor","t1","t1_value","toFixed","div5","append_hydration","div2","div0","span0","div1","span1","div4","div3","t2","t2_value","span","create_if_block_5","create_if_block_3","create_if_block_4","h1","$$props","getContextClient","uploadStatus","writable","uploadPercent","uploadState","up","errorMessage","errorToast","onSubmit","versionData","$mod","changelog","stability","success","goto","base","$$invalidate","value","$$subscribe_mod","GetModReferenceDocument"],"mappings":"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"}