{"version":3,"file":"16.b6e12bb3.js","sources":["../../../../../../src/routes/mod/[modId]/+page.ts","../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../src/lib/utils/schema.ts","../../../../../../src/lib/components/mods/compatibility/EditCompatibilityForm.svelte","../../../../../../src/routes/mod/[modId]/+page.svelte"],"sourcesContent":["import type { PageLoad } from './$types';\nimport { queryStore } from '@urql/svelte';\nimport { GetModDocument } from '$lib/generated';\nimport { loadWaitForNoFetch } from '$lib/utils/gql';\n\nexport const load: PageLoad = async ({ params, parent }) => ({\n  ...params,\n  ...(await loadWaitForNoFetch({\n    mod: queryStore({\n      query: GetModDocument,\n      client: (await parent()).client,\n      variables: { mod: params.modId }\n    })\n  }))\n});\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import Card, { Content } from '@smui/card';\n  import { prettyDate, prettyNumber } from '$lib/utils/formatting';\n\n  import TagList from '$lib/components/utils/TagList.svelte';\n  import CompatibilityButton from './compatibility/CompatibilityButton.svelte';\n\n  export let mod!: Pick<\n    Mod,\n    'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference' | 'compatibility' | 'tags'\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"text-lg break-words\">\n      <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n      <span\n        ><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n      ><br />\n      <span><strong>Created:</strong> {prettyDate(mod.created_at)}</span><br />\n      <span><strong>Views:</strong> {prettyNumber(mod.views)}</span><br />\n      <span><strong>Downloads:</strong> {prettyNumber(mod.downloads)}</span><br />\n      <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n      <TagList tags={mod.tags} />\n      {#if mod.compatibility}\n        <span><strong>Compatibility:</strong><CompatibilityButton compatibility={mod.compatibility} /> </span><br />\n      {/if}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import { Icon } from '@smui/common';\n  import { prettyDate } from '$lib/utils/formatting';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    release: 'new_releases',\n    beta: 'warning',\n    alpha: 'report'\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n      {#each Object.keys(stabilities) as stability}\n        {#if latestVersions[stability]}\n          <div class=\"version\">\n            <div class=\"text-4xl w-14 h-14 p-2.5\">\n              <Icon class=\"material-icons\">{stabilities[stability]}</Icon>\n            </div>\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n                >Version {latestVersions[stability].version}</a>\n              <div>{prettyDate(latestVersions[stability].created_at)}</div>\n            </div>\n            <div class=\"text-3xl w-14 h-14 p-2.5\">\n              <a\n                href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n                class=\"text-yellow-500 underline\">\n                <Icon class=\"material-icons\">download</Icon>\n              </a>\n            </div>\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </Content>\n</Card>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user?: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n      <div class=\"grid auto-rows-min text-lg gap-y-4\">\n        {#each authors as author}\n          <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n            <div\n              class=\"rounded-full bg-cover w-14 h-14\"\n              style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.webp'}\")`} />\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n              <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n  import type { CompatibilityInfoInput } from '$lib/generated';\n  import OutdatedBanner from '$lib/components/mods/compatibility/OutdatedBanner.svelte';\n\n  export let modLogo!: string;\n  export let modName!: string;\n  export let compatibility: CompatibilityInfoInput;\n\n  $: logo = modLogo || assets + '/images/no_image.webp';\n</script>\n\n<div class=\"relative overflow-hidden\">\n  <OutdatedBanner {compatibility} logo={true} />\n  <img class=\"rounded-lg sm:max-w-lg max-w-full w-full\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<Card class=\"h-fit\">\n  <Content>\n    <div class=\"markdown-content break-words\">\n      {#await description then descriptionRendered}\n        <p>{@html descriptionRendered}</p>\n      {/await}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { queryStore, getContextClient } from '@urql/svelte';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button, { Label, Icon } from '@smui/button';\n  import { installMod } from '$lib/stores/launcher';\n  import { prettyDate, prettyNumber, prettyBytes } from '$lib/utils/formatting';\n\n  export let modId!: string;\n\n  const client = getContextClient();\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  $: versions = queryStore({\n    query: GetModVersionsDocument,\n    client,\n    variables: {\n      mod: modId,\n      limit: 100,\n      offset: 0\n    }\n  });\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n<Card class=\"h-fit\">\n  {#if $versions.fetching}\n    <Content>Loading...</Content>\n  {:else if $versions.error}\n    <Content>Oh no... {$versions.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Version</Cell>\n          <Cell>Stability</Cell>\n          <Cell>SML Version</Cell>\n          <Cell>Downloads</Cell>\n          <Cell>Upload Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $versions.data.getMod.versions as version}\n          <Row on:click={() => toggleRow(version.id)}>\n            <Cell>{version.version}</Cell>\n            <Cell>{version.stability}</Cell>\n            <Cell>{version.sml_version}</Cell>\n            <Cell>{prettyNumber(version.downloads)}</Cell>\n            <Cell>{prettyDate(version.created_at)}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" href={base + '/mod/' + modId + '/version/' + version.id}>View</Button>\n                <Button variant=\"outlined\" href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n                  >Download</Button>\n                <Button variant=\"outlined\" on:click={() => installMod($versions.data.getMod.mod_reference)}>\n                  <Label>Install</Label>\n                  <Icon class=\"material-icons\">download</Icon>\n                </Button>\n              </div>\n            </Cell>\n          </Row>\n\n          {#if expandedVersions.has(version.id)}\n            <Row>\n              <Cell colspan={6}>\n                <div class=\"col-span-3 p-2\">Size: {prettyBytes(version.size)}</div>\n                <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n                <div class=\"col-span-6 p-2 markdown-content\">\n                  {#await markdown(version.changelog) then changelogRendered}\n                    {@html changelogRendered}\n                  {/await}\n                </div>\n              </Cell>\n            </Row>\n          {/if}\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n","import type { Thing, WithContext } from 'schema-dts';\nimport type { Mod } from '$lib/generated';\nimport { assets } from '$app/paths';\n\nexport type Schema = Thing | WithContext<Thing>;\n\nexport function serializeSchema(schema: Schema) {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema)}</script>`;\n}\n\nexport const modSchema = (mod: Pick<Mod, 'name' | 'logo' | 'short_description'>): Schema => ({\n  '@context': 'https://schema.org',\n  '@type': 'CreativeWork',\n  image: mod.logo || assets + '/images/no_image.webp',\n  name: mod.name,\n  description: mod.short_description\n});\n","<script lang=\"ts\">\n  import ModCompatibilityEdit from './ModCompatibilityEdit.svelte';\n  import type { ModData } from '$lib/models/mods';\n  import { EditModCompatibilityDocument } from '$lib/generated';\n  import { getContextClient } from '@urql/svelte';\n  import { createEventDispatcher } from 'svelte';\n  import Button from '@smui/button';\n\n  export let modId: string;\n  export let mod: ModData;\n\n  const client = getContextClient();\n\n  const dispatch = createEventDispatcher();\n\n  async function onSubmit(e: Event) {\n    e.preventDefault();\n    const success = (\n      await client\n        .mutation(EditModCompatibilityDocument, {\n          modId,\n          compatibility: mod.compatibility\n        })\n        .toPromise()\n    ).data.updateModCompatibility;\n    if (success) {\n      dispatch('submit');\n    } else {\n      dispatch('fail');\n    }\n  }\n</script>\n\n<form on:submit={onSubmit}>\n  <ModCompatibilityEdit bind:compatibilityInfo={mod.compatibility} />\n  <div class=\"p-5\">\n    <Button variant=\"outlined\" type=\"submit\">Save</Button>\n  </div>\n</form>\n","<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { writable } from 'svelte/store';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Button from '@smui/button';\n  import Dialog, { Title, Content as DialogContent } from '@smui/dialog';\n  import { modSchema, serializeSchema } from '$lib/utils/schema';\n  import EditCompatibilityForm from '$lib/components/mods/compatibility/EditCompatibilityForm.svelte';\n  import { getContextClient } from '@urql/svelte';\n  import type { PageData } from './$types';\n\n  export let data: PageData;\n\n  $: ({ modId, mod } = data);\n\n  const client = getContextClient();\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.mod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n  $: canUserEditCompatibility = $user?.roles?.editAnyModCompatibility || canUserEdit;\n\n  const deleteDialogOpen = writable<boolean>(false);\n  const editCompatibilityOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    client\n      .mutation(DeleteModDocument, { modId: $mod.data.mod.id })\n      .toPromise()\n      .then((value) => {\n        if (value.error) {\n          console.error(value.error.message);\n          errorMessage = 'Error deleting mod: ' + value.error.message;\n          errorToast = true;\n        } else {\n          // TODO Toast or something\n          goto(base + '/mods');\n        }\n      });\n  };\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description={$mod.data.mod.short_description}\n      title={$mod.data.mod.name}\n      image={$mod.data.mod.logo} />\n\n    {@html serializeSchema(modSchema($mod.data.mod))}\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.mod}\n  <div class=\"grid gap-6 xlx:grid-flow-row\">\n    <div class=\"flex flex-wrap h-auto justify-between items-center\">\n      <h1 class=\"text-4xl font-bold\">{$mod.data.mod.name}</h1>\n      <div>\n        {#if canUserEdit}\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/edit')}>Edit</Button>\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(true)}>Delete</Button>\n          <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/new-version')}>New Version</Button>\n        {/if}\n        {#if canUserEditCompatibility}\n          <Button variant=\"outlined\" on:click={() => editCompatibilityOpen.set(true)}>Compatibility</Button>\n        {/if}\n\n        <Button variant=\"outlined\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </Button>\n      </div>\n    </div>\n    <div class=\"grid grid-auto-max auto-cols-fr gap-4\">\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.mod} />\n      {:else}\n        <ModVersions modId={$mod.data.mod.id} />\n      {/if}\n      <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n        <ModLogo\n          modLogo={$mod.data.mod.logo}\n          modName={$mod.data.mod.name}\n          compatibility={$mod.data.mod.compatibility} />\n        <ModInfo mod={$mod.data.mod} />\n        <ModLatestVersions modId={$mod.data.mod.id} latestVersions={$mod.data.mod.latestVersions} />\n        <ModAuthors authors={$mod.data.mod.authors} />\n      </div>\n    </div>\n  </div>\n\n  {#if canUserEdit}\n    <Dialog bind:open={$deleteDialogOpen}>\n      <Title>Delete Mod?</Title>\n      <DialogContent>\n        <div class=\"grid grid-flow-row gap-4\">\n          <span>Are you sure you wish to delete this mod</span>\n\n          <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(false)}>Cancel</Button>\n          <Button variant=\"outlined\" on:click={() => deleteModFn()}>Delete</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  {/if}\n\n  {#if canUserEditCompatibility}\n    <Dialog bind:open={$editCompatibilityOpen}>\n      <Title>Edit Compatibilty</Title>\n      <DialogContent>\n        <EditCompatibilityForm\n          modId={$mod.data.mod.id}\n          mod={$mod.data.mod}\n          on:submit={() => editCompatibilityOpen.set(false)} />\n      </DialogContent>\n    </Dialog>\n  {/if}\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n"],"names":["load","async","params","parent","loadWaitForNoFetch","mod","queryStore","query","GetModDocument","client","variables","modId","compatibility","ctx","insert_hydration","target","span","anchor","append_hydration","strong","br","dirty","compatibilitybutton_changes","t4_value","source_url","prettyDate","created_at","prettyNumber","views","downloads","t20_value","mod_reference","taglist","TagList","props","tags","if_block","create_if_block","attr","a","a_href_value","div","h3","span0","strong0","br0","span1","strong1","br1","span2","strong2","br2","span3","strong3","br3","span4","strong4","br4","current","set_data","t4","t8","t8_value","t12","t12_value","t16","t16_value","t20","taglist_changes","$$props","version","a0","a0_href_value","base","id","a1","a1_href_value","API_REST","div4","div0","div2","div1","div3","t2","t2_value","t_value","Object","keys","length","i","each_blocks","stabilities","release","beta","alpha","latestVersions","user","username","t3_value","role","charAt","toUpperCase","slice","toLowerCase","div0_style_value","avatar","assets","t1","t1_value","t3","authors","img","img_src_value","modLogo","modName","logo","p","innerHTML","raw_value","info","handle_promise","promise","$$invalidate","description","full_description","markdown","short_description","t","stability","sml_version","html_tag","prettyBytes","size","hash","changelog","show_if","has","each_value","data","getMod","versions","error","message","fetching","getContextClient","expandedVersions","Set","toggleRow","versionId","delete","add","click_handler","installMod","$versions","$$subscribe_versions","GetModVersionsDocument","limit","offset","serializeSchema","schema","JSON","stringify","modSchema","image","name","modcompatibilityedit_props","compatibilityInfo","form","modcompatibilityedit_changes","dispatch","createEventDispatcher","onSubmit","e","preventDefault","success","mutation","EditModCompatibilityDocument","toPromise","updateModCompatibility","$$self","$$","not_equal","value","title","metadescriptors_changes","t0_value","create_if_block_8","create_if_block_7","create_if_block_4","create_if_block_3","h1","t0","modlogo_changes","modlatestversions_changes","modauthors_changes","create_if_block_6","modversions_changes","editcompatibilityform_changes","create_if_block_9","versionsTab","errorMessage","errorToast","deleteDialogOpen","writable","editCompatibilityOpen","deleteModFn","DeleteModDocument","$mod","then","console","goto","set","click_handler_2","click_handler_4","$deleteDialogOpen","$editCompatibilityOpen","$$subscribe_mod","canUserEdit","$user","roles","deleteContent","findIndex","author","user_id","canUserEditCompatibility","editAnyModCompatibility"],"mappings":"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"}