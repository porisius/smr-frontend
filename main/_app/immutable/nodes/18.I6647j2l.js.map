{"version":3,"file":"18.I6647j2l.js","sources":["../../../../../../src/routes/mod/[modId]/new-version/+page.ts","../../../../../../src/lib/utils/chunked-upload.ts","../../../../../../src/routes/mod/[modId]/new-version/+page.svelte"],"sourcesContent":["import type { PageLoad } from './$types';\n\nexport const load: PageLoad = async ({ params }) => ({\n  ...params\n});\n","/* eslint-disable */\n\nimport type { File } from '$lib/models/file';\nimport type { Client } from 'urql';\nimport {\n  CheckVersionUploadStateDocument,\n  FinalizeCreateVersionDocument,\n  type Exact,\n  type NewVersion,\n  CreateVersionDocument,\n  UploadVersionPartDocument,\n  type CheckVersionUploadStateQuery\n} from '$lib/generated';\nimport type { Writable } from 'svelte/store';\nimport { queryStore } from '@urql/svelte';\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n};\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (\n  file: File,\n  modId: string,\n  version: NewVersion,\n  state: Writable<UploadState>,\n  client: Client\n): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity)\n    .fill(0)\n    .map((_, index) => index)\n    .reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return client\n      .mutation(UploadVersionPartDocument, {\n        modId: modId,\n        versionId: versionID,\n        part: chunkId,\n        file: chunk\n      })\n      .toPromise();\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID)\n        .then(() => {\n          activeConnections -= 1;\n\n          state.set({\n            total: chunksQuantity,\n            uploaded: chunksQuantity - chunksQueue.length - activeConnections\n          });\n\n          return sendNext(versionID);\n        })\n        .catch((err) => {\n          console.error('Upload failed:', err);\n          activeConnections -= 1;\n          chunksQueue.push(chunkId);\n          retries += 1;\n          if (retries < 5) {\n            return sendNext(versionID);\n          } else {\n            throw new Error('Failed uploading after 5 attempts');\n          }\n        }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return client\n    .mutation(CreateVersionDocument, { modId })\n    .toPromise()\n    .then(async (data) => {\n      state.set({\n        total: chunksQuantity,\n        uploaded: 0\n      });\n\n      await sendNext(data.data.createVersion);\n\n      return data.data.createVersion;\n    })\n    .then((versionID) => {\n      console.log('Finalizing', { versionID });\n\n      return client\n        .mutation(FinalizeCreateVersionDocument, { modId, versionId: versionID, version })\n        .toPromise()\n        .then(() => {\n          return new Promise<ChunkedResponse>((resolve, reject) => {\n            let tries = 0;\n            let checkVersionUploadState = queryStore({\n              query: CheckVersionUploadStateDocument,\n              client,\n              variables: {\n                modId: modId,\n                versionId: versionID\n              },\n              requestPolicy: 'network-only'\n            });\n            const interval = setInterval(() => {\n              if (tries == 60) {\n                clearInterval(interval);\n                return reject(new Error('Timed out waiting for mod processing'));\n              }\n\n              checkVersionUploadState.pause();\n              checkVersionUploadState.resume();\n              tries++;\n            }, 10000);\n\n            const unsub = checkVersionUploadState.subscribe((data) => {\n              if (data.fetching) {\n                return;\n              }\n\n              if (data.error) {\n                clearInterval(interval);\n                reject(new Error(data.error.message));\n                setTimeout(unsub);\n                return;\n              }\n\n              if (!data.data?.checkVersionUploadState?.version?.id) {\n                return;\n              }\n\n              unsub();\n              clearInterval(interval);\n              resolve(data.data.checkVersionUploadState);\n            });\n          });\n        });\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n","<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import { goto } from '$app/navigation';\n  import type { VersionData } from '$lib/models/versions';\n  import VersionForm from '$lib/components/versions/VersionForm.svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { writable } from 'svelte/store';\n  import { chunkedUpload } from '$lib/utils/chunked-upload';\n  import type { UploadState } from '$lib/utils/chunked-upload';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import type { PageData } from './$types';\n  import { getModalStore, getToastStore, type ModalSettings } from '@skeletonlabs/skeleton';\n  import EditCompatibilityForm from '$lib/components/mods/compatibility/EditCompatibilityForm.svelte';\n\n  export let data: PageData;\n\n  const { modId } = data;\n\n  const client = getContextClient();\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set((up.uploaded / up.total) * 100);\n      }\n    }\n  });\n\n  const toastStore = getToastStore();\n\n  const mod = queryStore({\n    query: GetModDocument,\n    client,\n    variables: { mod: modId }\n  });\n\n  const onSubmit = async (versionData: VersionData) =>\n    chunkedUpload(\n      versionData.file,\n      $mod.data.mod.id,\n      {\n        changelog: versionData.changelog,\n        stability: versionData.stability\n      },\n      uploadState,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      client\n    )\n      .then((success) => {\n        toastStore.trigger({\n          message: `Version created`,\n          background: 'variant-filled-success',\n          timeout: 5000\n        });\n        goto(base + '/mod/' + modId + '/version/' + success.version.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        toastStore.trigger({\n          message: 'Error creating version: ' + err.message,\n          background: 'variant-filled-error',\n          autohide: false\n        });\n        uploadStatus.set('');\n      });\n\n  const goBackFn = () => {\n    goto(base + '/mod/' + modId);\n  };\n\n  const backModal: ModalSettings = {\n    type: 'confirm',\n    title: 'Go Back?',\n    buttonTextCancel: 'Keep Editing',\n    buttonTextConfirm: 'Go Back',\n    body: 'Going back will discard any unsaved changes. Are you sure you wish to continue?',\n    response: (r: boolean) => {\n      if (r) {\n        goBackFn();\n      }\n    }\n  };\n\n  const modalStore = getModalStore();\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description=\"Creating a new version of mod {$mod.data.mod.name}\"\n      title=\"New version of mod {$mod.data.mod.name}\" />\n  {/if}\n</svelte:head>\n\n<div class=\"flex h-auto flex-wrap items-center justify-between\">\n  <h1 class=\"my-4 text-4xl font-bold\">\n    New Version for\n    {#if $mod.fetching}\n      ...\n    {:else if !$mod.error}\n      {$mod.data.mod.name}\n    {/if}\n  </h1>\n  <div>\n    <button\n      class=\"variant-ghost-primary btn\"\n      title=\"View the description page for this mod\"\n      on:click={() => modalStore.trigger(backModal)}>\n      <span class=\"material-icons pr-2\">arrow_back</span>\n      Back to Mod\n    </button>\n  </div>\n</div>\n\n<div class=\"card p-4\">\n  <section>\n    {#if $mod.fetching}\n      <p>Loading...</p>\n    {:else if $mod.error}\n      <p>Oh no... {$mod.error.message}</p>\n    {:else}\n      <VersionForm {onSubmit} modReference={$mod.data.mod.mod_reference} submitIcon=\"add_circle\" />\n\n      {#if $uploadStatus}\n        <div class=\"relative pt-4\">\n          <div class=\"mb-2 flex items-center justify-between\">\n            <div>\n              <span\n                class=\"inline-block rounded-full bg-yellow-600 px-2 py-1 text-xs font-semibold uppercase text-white\">\n                {$uploadStatus}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <span class=\"inline-block text-xs font-semibold text-white\">{$uploadPercent.toFixed(0)}%</span>\n            </div>\n          </div>\n          <div class=\"mb-4 flex h-2 overflow-hidden rounded bg-gray-600 text-xs\">\n            <div\n              style=\"width: {$uploadPercent.toFixed(0)}%\"\n              class=\"flex flex-col justify-center whitespace-nowrap bg-yellow-600 text-center text-white shadow-none\" />\n          </div>\n        </div>\n      {/if}\n\n      <div class=\"p-4\">\n        <span>Edit Compatibility Info</span>\n      </div>\n      <div class=\"card p-4\">\n        <EditCompatibilityForm\n          mod={$mod.data.mod}\n          modId={$mod.data.mod.id}\n          on:fail={() => {\n            alert('Failed to update compatibility information, check browser console for more info.');\n          }}\n          on:submit={() => {\n            alert(\"Mod compatibility data updated. Don't forget to upload the version too!\");\n          }} />\n      </div>\n    {/if}\n  </section>\n</div>\n"],"names":["load","async","params","e","chunkedUpload","file","modId","version","state","client","chunksQuantity","Math","ceil","size","chunkSize","chunksQueue","Array","fill","map","_","index","reverse","upload","chunk","chunkId","versionID","mutation","UploadVersionPartDocument","versionId","part","toPromise","threadsQuantity","activeConnections","retries","sendNext","length","pop","begin","slice","Promise","all","then","set","total","uploaded","catch","err","console","error","push","Error","CreateVersionDocument","data","createVersion","log","t","FinalizeCreateVersionDocument","resolve","reject","tries","checkVersionUploadState","queryStore","query","CheckVersionUploadStateDocument","variables","requestPolicy","interval","setInterval","clearInterval","pause","resume","unsub","subscribe","fetching","message","setTimeout","id","description","ctx","mod","name","title","dirty","metadescriptors_changes","t_value","set_data","modReference","mod_reference","create_if_block_2","insert_hydration","target","div0","anchor","div1","versionform_changes","editcompatibilityform_changes","p","t1","t1_value","toFixed","div5","append_hydration","div2","span0","span1","div4","div3","t2","t2_value","create_if_block_5","create_if_block_3","create_if_block_4","h1","button","section","$$props","getContextClient","uploadStatus","writable","uploadPercent","uploadState","up","toastStore","getToastStore","GetModDocument","onSubmit","versionData","$mod","changelog","stability","success","trigger","background","timeout","goto","base","autohide","goBackFn","backModal","type","buttonTextCancel","buttonTextConfirm","body","response","r","modalStore","getModalStore","alert"],"mappings":"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"}