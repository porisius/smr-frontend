{"version":3,"file":"SMLVersionForm-a4f5d314.js","sources":["../../../../../../src/lib/models/sml-versions.ts","../../../../../../src/lib/components/sml-versions/SMLVersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport type { TargetName, UpdateSmlVersionTarget, VersionStabilities } from '$lib/generated';\n\nexport type SMLTargetData = {\n  targetName: TargetName;\n  link: string;\n};\n\nexport type SMLVersionData = {\n  version: string;\n  satisfactory_version: number;\n  bootstrap_version?: string;\n  stability: VersionStabilities;\n  link: string;\n  changelog: string;\n  date: string;\n  targets: UpdateSmlVersionTarget[];\n  engine_version: string;\n};\n\nconst versionRegex =\n  /^(<=|<|>|>=|\\^)?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\nexport const smlTargetSchema = zod.object({\n  targetName: zod.string(),\n  link: zod.string().url()\n});\n\nexport const smlVersionSchema = zod.object({\n  version: zod.string().regex(versionRegex),\n  satisfactory_version: zod.number(),\n  bootstrap_version: zod.string().regex(versionRegex).optional(),\n  stability: zod.string(),\n  link: zod.string().url(),\n  targets: zod.array(smlTargetSchema).superRefine((targets, ctx) => {\n    for (let i = 0; i < targets.length; i += 1) {\n      if (targets.findIndex((t) => t.targetName == targets[i].targetName) !== i) {\n        ctx.addIssue({\n          code: zod.ZodIssueCode.custom,\n          message: 'Targets must be unique',\n          path: [i, 'targetName']\n        });\n      }\n    }\n  }),\n  changelog: zod.string(),\n  date: zod.string(),\n  engine_version: zod.string()\n});\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import type { SMLVersionData } from '$lib/models/sml-versions';\n  import { smlVersionSchema } from '$lib/models/sml-versions';\n  import Textfield from '@smui/textfield';\n  import Button from '@smui/button';\n  import { TargetName, VersionStabilities } from '$lib/generated';\n  import Select, { Option } from '@smui/select';\n\n  export let onSubmit: (data: SMLVersionData) => void;\n\n  // export let editing = false;\n\n  export let initialValues: SMLVersionData = {\n    link: '',\n    date: new Date().toISOString(),\n    changelog: '',\n    satisfactory_version: 0,\n    stability: VersionStabilities.Alpha,\n    version: '',\n    targets: [{ targetName: TargetName.Windows, link: '' }],\n    engine_version: ''\n  };\n  export let submitText = 'Create';\n\n  const { form, data, addField, unsetField } = createForm<SMLVersionData>({\n    initialValues: initialValues,\n    extend: [validator({ schema: smlVersionSchema }), reporter],\n    onSubmit: (submitted: SMLVersionData) => onSubmit(trimNonSchema(submitted, smlVersionSchema))\n  });\n\n  const addTarget = () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    addField('targets', { targetName: TargetName.Windows, link: '' } as any);\n  };\n\n  const removeTarget = (i: number) => {\n    unsetField(`targets.${i}`);\n  };\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.version} label=\"Version\" required />\n      <ValidationMessage for=\"version\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.satisfactory_version} label=\"Satisfactory Version\" required type=\"number\" />\n      <ValidationMessage for=\"satisfactory_version\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if $data.bootstrap_version !== undefined && $data.bootstrap_version !== null}\n      <div class=\"grid grid-flow-row gap-2\">\n        <Textfield bind:value={$data.bootstrap_version} label=\"Bootstrap Version\" required />\n        <ValidationMessage for=\"bootstrap_version\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n    {/if}\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Select bind:value={$data.stability} label=\"Stability\">\n        <Option value=\"release\">Release</Option>\n        <Option value=\"alpha\">Alpha</Option>\n        <Option value=\"beta\">Beta</Option>\n      </Select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <Textfield\n          textarea\n          class=\"vertical-textarea\"\n          bind:value={$data.changelog}\n          label=\"Changelog\"\n          required\n          input$rows={10} />\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <span>Targets:</span>\n    <div class=\"grid grid-flow-row gap-2\">\n      {#each $data.targets as target, i}\n        <div class=\"flex content-center gap-2\">\n          <div>\n            <Select bind:value={target.targetName} label=\"Platform\">\n              <Option value={TargetName.Windows}>Windows Client</Option>\n              <Option value={TargetName.WindowsServer}>Windows Server</Option>\n              <Option value={TargetName.LinuxServer}>Linux Server</Option>\n              <svelte:fragment slot=\"helperText\">\n                <ValidationMessage for=\"targets.{i}.targetName\" let:messages={message}>\n                  <span class=\"validation-message\">{message || ''}</span>\n                </ValidationMessage>\n              </svelte:fragment>\n            </Select>\n          </div>\n          <div class=\"grow\">\n            <Textfield placeholder=\"URL\" bind:value={target.link} label=\"URL\" class=\"w-full\">\n              <svelte:fragment slot=\"helper\">\n                <ValidationMessage for=\"targets.{i}.link\" let:messages={message}>\n                  <span class=\"validation-message\">{message || ''}</span>\n                </ValidationMessage>\n              </svelte:fragment>\n            </Textfield>\n          </div>\n          <Button type=\"button\" disabled={$data.targets.length == 1} on:click={() => removeTarget(i)} class=\"h-full\"\n            >Remove</Button>\n        </div>\n      {/each}\n      <Button type=\"button\" on:click={addTarget}>Add target</Button>\n\n      <Textfield bind:value={$data.link} label=\"Link\" />\n      <ValidationMessage for=\"link\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.date} label=\"Date and Time\" required />\n      <ValidationMessage for=\"date\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <Textfield bind:value={$data.engine_version} label=\"Engine version\" required />\n      <ValidationMessage for=\"engine_version\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div>\n      <Button variant=\"outlined\" type=\"submit\">{submitText}</Button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["versionRegex","smlTargetSchema","zod.object","targetName","zod.string","link","url","smlVersionSchema","version","regex","satisfactory_version","zod.number","bootstrap_version","optional","stability","targets","zod.array","superRefine","ctx","i","length","findIndex","t","addIssue","code","zod.ZodIssueCode","custom","message","path","changelog","date","engine_version","t_value","insert_hydration","target","span","anchor","dirty","set_data","textfield_props","value","div","textfield_changes","innerHTML","raw_value","TargetName","Windows","WindowsServer","LinuxServer","select_props","disabled","div2","append_hydration","div0","div1","select_changes","button_changes","textfield0_props","textfield1_props","undefined","create_if_block","textfield2_props","handle_promise","promise","markdown","info","each_value","textfield3_props","textfield4_props","textfield5_props","form_1","div10","div5","div3","div4","span0","span1","div6","div7","div8","div9","textfield0_changes","textfield1_changes","textfield2_changes","each_blocks","textfield3_changes","textfield4_changes","textfield5_changes","onSubmit","$$props","initialValues","Date","toISOString","VersionStabilities","Alpha","submitText","form","data","addField","unsetField","createForm","extend","validator","schema","reporter","submitted","trimNonSchema","addTarget","removeTarget","$$self","$$","not_equal","$data","click_handler","preview"],"mappings":"0iBAoBA,KAAMA,IACJ,qMAEWC,GAAkBC,GAAW,CACxCC,WAAYC,KACZC,KAAMD,GAAAA,EAAaE,IAGR,CAAA,CAAA,EAAAC,GAAmBL,GAAW,CACzCM,QAASJ,GAAAA,EAAaK,MAAMT,EAC5BU,EAAAA,qBAAsBC,KACtBC,kBAAmBR,GAAAA,EAAaK,MAAMT,EAAca,EAAAA,SAAAA,EACpDC,UAAWV,GAAAA,EACXC,KAAMD,GAAaE,EAAAA,IAAAA,EACnBS,QAASC,GAAUf,IAAiBgB,YAAY,CAACF,EAASG,IAAAA,CACxD,OAASC,GAAI,EAAGA,EAAIJ,EAAQK,OAAQD,GAAK,EACnC,AAAAJ,EAAQM,UAAWC,GAAMA,EAAEnB,YAAcY,EAAQI,GAAGhB,UAAgBgB,IAAAA,GACtED,EAAIK,SAAS,CACXC,KAAMC,GAAiBC,OACvBC,QAAS,yBACTC,KAAM,CAACT,EAAG,YAKlBU,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,UAAWzB,GACX0B,EAAAA,KAAM1B,KACN2B,eAAgB3B,GAAAA,CAAAA,CAAAA,gGCKwB4B,EAAAd,QAAW,IAAE,oKAA/Ce,EAAsDC,EAAAC,EAAAC,kBAApB,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,wCAObA,EAAAd,QAAW,IAAE,mKAA/Ce,CAAAA,EAAsDC,EAAAC,EAAAC,iBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,CAAAA,CAAAA,qHAMxB,MAAAd,MAAMN,oBAAAA,QAAN2B,GAAAC,MAAAtB,KAAMN,0IAC4Be,KAAO,EAAA,GAAAA,CAAAA,cAAPA,KAAOA,EAAA,QAAA,wPAFlEM,CAAAA,EAKKC,EAAAO,EAAAL,yEAJoBM,EAAAF,MAAAtB,KAAMN,6PAEOoB,EAAAd,QAAW,IAAE,mKAA/Ce,CAAAA,EAAsDC,EAAAC,EAAAC,CAAAA,iBAApB,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,CAAAA,CAAAA,qDAOzB,uBAAA,gFACF,OAAA,CAAA,aAAA,8EACD,oBAAA,MAAA,CAAA,g4BAGaA,EAAAd,QAAW,IAAE,oKAA/Ce,EAAsDC,EAAAC,EAAAC,iBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,wCAcXA,EAAAd,QAAW,IAAE,oKAA/Ce,EAAsDC,EAAAC,EAAAC,iBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,0FAMJd,EAAe,IAAA,iKAA1De,CAAAA,EAAgEC,EAAAO,EAAAL,CAAAA,oCAArBlB,EAAe,IAAA,KAAAuB,GAAAE,UAAAC,uGAWnB,8BAAA,gBAAA,CAAA,sEACM,8BAAA,uFACF,4BAAA,cAAA,CAAA,yFAFxBJ,MAAAK,GAAWC,mEACXN,MAAAK,GAAWE,yEACXP,MAAAK,GAAWG,kpBAGYhB,EAAAd,QAAW,IAAE,oKAA/Ce,EAAsDC,EAAAC,EAAAC,CAAAA,iBAApB,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,gFADhBd,EAAC,IAAA,8CAA4BS,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,uQAUjCK,EAAAd,QAAW,IAAE,mKAA/Ce,CAAAA,EAAsDC,EAAAC,EAAAC,iBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,CAAAA,CAAAA,8EADhBd,EAAC,IAAA,wCAAsBS,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,CAAA,CAAA,oRAOlE,sBAAA,6LArBmB,CAAA,CAAA,EAAA,AAAAT,MAAOf,qBAAP8C,GAAAT,MAAAtB,MAAOf,iLAYc,CAAA,CAAA,EAAA,AAAAe,MAAOb,OAAAA,QAAPkC,IAAAC,MAAAtB,MAAOb,8HAQlB6C,SAAAhC,EAAM,GAAAH,QAAQK,QAAU,ieAtB1Da,CAAAA,EAwBKC,EAAAiB,EAAAf,CAAAA,EAvBHgB,EAWKD,EAAAE,sBACLD,EAQKD,EAAAG,sHAnBiBC,EAAAf,MAAAtB,MAAOf,qGAYcuC,EAAAF,MAAAtB,MAAOb,wCAQlB,AAAAgC,EAAA,GAAAmB,IAAAN,SAAAhC,EAAM,GAAAH,QAAQK,QAAU,wQAIjB,0BAAA,YAAA,CAAA,uDAIPY,EAAAd,QAAW,IAAE,mKAA/Ce,CAAAA,EAAsDC,EAAAC,EAAAC,CAAAA,gBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,wCAObA,EAAAd,QAAW,IAAE,oKAA/Ce,EAAsDC,EAAAC,EAAAC,kBAApB,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,CAAAA,CAAAA,sCAObA,EAAAd,QAAW,IAAE,mKAA/Ce,CAAAA,EAAsDC,EAAAC,EAAAC,iBAApB,CAAA,AAAAC,EAAA,SAAAL,IAAAA,GAAAd,QAAW,IAAE,KAAAoB,EAAAhB,EAAAU,uDAKPd,EAAU,gBAAVA,EAAU,EAAA,CAAA,mCAAVA,EAAU,EAAA,CAAA,sQA1G7B,AAAAA,KAAMV,UAAO,QAAbiD,IAAAjB,MAAAtB,KAAMV,wHACkBmB,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,CAAA,CAAA,6GAM/B,AAAAT,KAAMR,+BAANgD,IAAAlB,MAAAtB,KAAMR,kJAC+BiB,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,6BAKhET,EAAK,GAACN,oBAAsB+C,QAAazC,EAAK,GAACN,oBAAsB,MAAIgD,GAAA1C,6FAUxD,AAAAA,KAAMJ,oBAANmC,IAAAT,MAAAtB,KAAMJ,4HAKuBa,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,CAAA,CAAA,oIAaxC,EAHA,EAAA,AAAAT,KAAMW,oBAANgC,IAAArB,MAAAtB,KAAMW,6HAI6BF,KAAO,EAAA,GAAAA,CAAAA,cAAPA,KAAOA,EAAA,QAAA,4GAMhDmC,EAAAA,GAAAC,GAAAC,GAAS9C,EAAO,EAAA+C,EAAAA,CAAAA,EAQnB,GAAAC,IAAAhD,KAAMH,8BAAXK,OAAID,GAAA,uJA2B0BD,EAAS,kDAElB,AAAAA,KAAMb,OAAAA,QAAN8D,IAAA3B,MAAAtB,KAAMb,qHACesB,KAAO,EAAA,GAAAA,CAAAA,cAAPA,KAAOA,EAAA,QAAA,wFAM5B,EAAA,AAAAT,KAAMY,OAAAA,QAANsC,IAAA5B,MAAAtB,KAAMY,qHACeH,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,yFAM5B,EAAA,MAAAT,MAAMa,yBAANsC,IAAA7B,MAAAtB,KAAMa,yIACyBJ,KAAO,EAAA,GAAAA,eAAPA,KAAOA,EAAA,QAAA,CAAA,CAAA,gbArDrD,wDAOJ,66BAPI,UAAA,kHAOJ,29BAzDVM,CAAAA,EAgHMC,EAAAoC,EAAAlC,CAAAA,EA/GJgB,EA8GKkB,EAAAC,GA7GHnB,EAKKmB,EAAAlB,yCAELD,EAKKmB,EAAAjB,iEAWLF,EASKmB,EAAApB,0CAELC,EAmBKmB,EAAAC,CAAAA,EAlBHpB,EAWKoB,EAAAC,0CACLrB,EAAAA,EAKKoB,EAAAE,EAJHtB,EAAAA,EAAoBsB,GAAAC,EAAAA,mFAOxBvB,EAAAA,EAAoBmB,EAAAK,qBACpBxB,EAkCKmB,EAAAM,CAAAA,oHAELzB,EAKKmB,EAAAO,+CAEL1B,EAAAA,EAKKmB,EAAAQ,EAAAA,+CAEL3B,EAEKmB,EAAAS,qGA3GoBC,EAAAzC,MAAAtB,KAAMV,2HAON0E,GAAA1C,MAAAtB,KAAMR,8GAM1BQ,EAAK,GAACN,oBAAsB+C,QAAazC,EAAK,GAACN,oBAAsB,yKAUpD2C,GAAAf,MAAAtB,KAAMJ,8HAeVqE,GAAA3C,MAAAtB,KAAMW,+GAUZQ,EAAA,GAAA0B,KAAAA,IAAAC,GAAS9C,EAAO,EAAA4C,IAAAA,GAAAC,GAAAE,yBAQnBC,GAAAhD,KAAMH,2BAAXK,OAAID,GAAA,EAAA,+GAAJC,OAAID,EAAAiE,EAAAhE,OAAAD,GAAA,2GA6BiBkE,EAAA7C,MAAAtB,KAAMb,6HAONiF,GAAA9C,MAAAtB,KAAMY,8HAONyD,GAAA/C,MAAAtB,KAAMa,0WA3C3BX,OAAID,GAAA,6vBA7FCqE,GAAwCC,iBAIxCC,EAAa,CACtBrF,KAAM,GACNyB,KAAI,GAAM6D,QAAOC,cACjB/D,UAAW,GACXnB,qBAAsB,EACtBI,UAAW+E,GAAmBC,MAC9BtF,QAAS,GACTO,QAAO,CAAA,CAAKZ,WAAY0C,GAAWC,QAASzC,KAAM,EAAA,CAAA,EAClD0B,eAAgB,OAEPgE,CAAAA,WAAAA,EAAa,UAAQN,EAExB,KAAAO,CAAAA,KAAAA,EAAIC,KAAEA,EAAIC,SAAEA,EAAQC,WAAEA,GAAeC,GAAU,CACtCV,cAAAA,EACfW,QAASC,GAAS,CAAGC,OAAQhG,EAAAA,CAAAA,EAAqBiG,IAClDhB,SAAWiB,GAA8BjB,EAASkB,GAAcD,EAAWlG,gCAGvEoG,GAAS,IAAA,CAEbT,EAAS,UAAS,CAAI/F,WAAY0C,GAAWC,QAASzC,KAAM,EAAA,CAAA,CAAA,EAGxDuG,EAAgBzF,GAAAA,CACpBgF,aAAsBhF,oBASG,CAAA,AAAA0F,EAAAC,GAAAC,UAAAC,EAAMxG,QAAOgC,CAAAA,GAAbwE,GAAMxG,QAAOgC,2BAOb,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMtG,qBAAoB8B,CAAA,GAA1BwE,GAAMtG,qBAAoB8B,yBAQxB,CAAA,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMpG,kBAAiB4B,CAAA,GAAvBwE,GAAMpG,kBAAiB4B,0BAQ5B,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMlG,UAAS0B,CAAAA,GAAfwE,GAAMlG,UAAS0B,yBAenB,CAAA,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMnF,UAASW,IAAfwE,GAAMnF,UAASW,4BAqBL,CAAA,AAAAqE,EAAAC,GAAAC,UAAA7E,GAAO/B,WAAUqC,CAAAA,GAAjBN,IAAO/B,WAAUqC,4BAYI,CAAA,AAAAqE,EAAAC,GAAAC,UAAA7E,GAAO7B,KAAImC,IAAXN,IAAO7B,KAAImC,YAQqB,KAAAyE,IAAA9F,GAAAyF,EAAazF,CAAAA,gBAMrE,AAAA0F,EAAAC,GAAAC,UAAAC,EAAM3G,KAAImC,CAAA,GAAVwE,GAAM3G,KAAImC,yBAOV,CAAA,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMlF,KAAIU,IAAVwE,GAAMlF,KAAIU,0BAOV,AAAAqE,EAAAC,GAAAC,UAAAC,EAAMjF,eAAcS,CAAAA,GAApBwE,GAAMjF,eAAcS,uLAzG5C0E,EAAWF,EAAMnF,WAAwB,EAAA,CAAA"}